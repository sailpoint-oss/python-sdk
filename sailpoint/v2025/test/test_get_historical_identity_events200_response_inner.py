# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sailpoint.v2025.models.get_historical_identity_events200_response_inner import GetHistoricalIdentityEvents200ResponseInner

class TestGetHistoricalIdentityEvents200ResponseInner(unittest.TestCase):
    """GetHistoricalIdentityEvents200ResponseInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetHistoricalIdentityEvents200ResponseInner:
        """Test GetHistoricalIdentityEvents200ResponseInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetHistoricalIdentityEvents200ResponseInner`
        """
        model = GetHistoricalIdentityEvents200ResponseInner()
        if include_optional:
            return GetHistoricalIdentityEvents200ResponseInner(
                access_item = {id=8c190e6787aa4ed9a90bd9d5344523fb, accessType=account, nativeIdentity=127999, sourceName=JDBC Entitlements Source, entitlementCount=0, displayName=Sample Name},
                identity_id = '',
                event_type = '',
                dt = '',
                governance_event = sailpoint.v2025.models.correlated_governance_event.CorrelatedGovernanceEvent(
                    name = 'Manager Certification for Jon Snow', 
                    dt = '2019-03-08T22:37:33.901Z', 
                    type = 'certification', 
                    governance_id = '2c91808a77ff216301782327a50f09bf', 
                    owners = [{id=8a80828f643d484f01643e14202e206f, displayName=John Snow}], 
                    reviewers = [{id=8a80828f643d484f01643e14202e206f, displayName=John Snow}], 
                    decision_maker = sailpoint.v2025.models.certifier_response.CertifierResponse(
                        id = '8a80828f643d484f01643e14202e206f', 
                        display_name = 'John Snow', ), ),
                changes = [
                    {name=firstname, previousValue=adam, newValue=zampa}
                    ],
                access_request = sailpoint.v2025.models.access_request_response_1.AccessRequestResponse_1(
                    requester_id = '2c91808a77ff216301782327a50f09bf', 
                    requester_name = 'Bing C', 
                    items = [{operation=Add, accessItemType=role, name=Role-1, decision=APPROVED, description=The role descrition, sourceId=8a80828f643d484f01643e14202e206f, sourceName=Source1, approvalInfos=[{name=John Snow, id=8a80828f643d484f01643e14202e2000, status=Approved}]}], ),
                certification_id = '2c91808a77ff216301782327a50f09bf',
                certification_name = 'Cert name',
                signed_date = '2019-03-08T22:37:33.901Z',
                certifiers = [{id=8a80828f643d484f01643e14202e206f, displayName=John Snow}],
                reviewers = [{id=8a80828f643d484f01643e14202e206f, displayName=John Snow}],
                signer = sailpoint.v2025.models.certifier_response.CertifierResponse(
                    id = '8a80828f643d484f01643e14202e206f', 
                    display_name = 'John Snow', ),
                account = sailpoint.v2025.models.account_status_changed_account.AccountStatusChanged_account(
                    id = '', 
                    native_identity = '', 
                    display_name = '', 
                    source_id = '', 
                    source_name = '', 
                    entitlement_count = 56, 
                    access_type = '', ),
                status_change = sailpoint.v2025.models.account_status_changed_status_change.AccountStatusChanged_statusChange(
                    previous_status = 'enabled', 
                    new_status = 'enabled', )
            )
        else:
            return GetHistoricalIdentityEvents200ResponseInner(
        )
        """

    def testGetHistoricalIdentityEvents200ResponseInner(self):
        """Test GetHistoricalIdentityEvents200ResponseInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
