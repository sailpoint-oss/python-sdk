# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sailpoint.v2025.models.sp_config_message1 import SpConfigMessage1

class TestSpConfigMessage1(unittest.TestCase):
    """SpConfigMessage1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpConfigMessage1:
        """Test SpConfigMessage1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpConfigMessage1`
        """
        model = SpConfigMessage1()
        if include_optional:
            return SpConfigMessage1(
                key = 'UNKNOWN_REFERENCE_RESOLVER',
                text = 'Unable to resolve reference for object [type: IDENTITY, id: 2c91808c746e9c9601747d6507332ecz, name: random identity]',
                details = {details=message details}
            )
        else:
            return SpConfigMessage1(
                key = 'UNKNOWN_REFERENCE_RESOLVER',
                text = 'Unable to resolve reference for object [type: IDENTITY, id: 2c91808c746e9c9601747d6507332ecz, name: random identity]',
                details = {details=message details},
        )
        """

    def testSpConfigMessage1(self):
        """Test SpConfigMessage1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
