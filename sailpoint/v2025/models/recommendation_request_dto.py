# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.recommendation_request import RecommendationRequest
from typing import Optional, Set
from typing_extensions import Self

class RecommendationRequestDto(BaseModel):
    """
    RecommendationRequestDto
    """ # noqa: E501
    requests: Optional[List[RecommendationRequest]] = None
    exclude_interpretations: Optional[StrictBool] = Field(default=False, description="Exclude interpretations in the response if \"true\". Return interpretations in the response if this attribute is not specified.", alias="excludeInterpretations")
    include_translation_messages: Optional[StrictBool] = Field(default=False, description="When set to true, the calling system uses the translated messages for the specified language", alias="includeTranslationMessages")
    include_debug_information: Optional[StrictBool] = Field(default=False, description="Returns the recommender calculations if set to true", alias="includeDebugInformation")
    prescribe_mode: Optional[StrictBool] = Field(default=False, description="When set to true, uses prescribedRulesRecommenderConfig to get identity attributes and peer group threshold instead of standard config.", alias="prescribeMode")
    __properties: ClassVar[List[str]] = ["requests", "excludeInterpretations", "includeTranslationMessages", "includeDebugInformation", "prescribeMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item_requests in self.requests:
                if _item_requests:
                    _items.append(_item_requests.to_dict())
            _dict['requests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requests": [RecommendationRequest.from_dict(_item) for _item in obj["requests"]] if obj.get("requests") is not None else None,
            "excludeInterpretations": obj.get("excludeInterpretations") if obj.get("excludeInterpretations") is not None else False,
            "includeTranslationMessages": obj.get("includeTranslationMessages") if obj.get("includeTranslationMessages") is not None else False,
            "includeDebugInformation": obj.get("includeDebugInformation") if obj.get("includeDebugInformation") is not None else False,
            "prescribeMode": obj.get("prescribeMode") if obj.get("prescribeMode") is not None else False
        })
        return _obj


