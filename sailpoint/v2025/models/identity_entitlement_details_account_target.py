# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentityEntitlementDetailsAccountTarget(BaseModel):
    """
    IdentityEntitlementDetailsAccountTarget
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The id of account", alias="accountId")
    account_name: Optional[StrictStr] = Field(default=None, description="The name of account", alias="accountName")
    account_uuid: Optional[StrictStr] = Field(default=None, description="The UUID representation of the account if available", alias="accountUUID")
    source_id: Optional[StrictStr] = Field(default=None, description="The id of Source", alias="sourceId")
    source_name: Optional[StrictStr] = Field(default=None, description="The name of Source", alias="sourceName")
    remove_date: Optional[StrictStr] = Field(default=None, description="The removal date scheduled for the entitlement on the Identity", alias="removeDate")
    assignment_id: Optional[StrictStr] = Field(default=None, description="The assignmentId of the entitlement on the Identity", alias="assignmentId")
    revocable: Optional[StrictBool] = Field(default=False, description="If the entitlement can be revoked")
    __properties: ClassVar[List[str]] = ["accountId", "accountName", "accountUUID", "sourceId", "sourceName", "removeDate", "assignmentId", "revocable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityEntitlementDetailsAccountTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.account_uuid is None and "account_uuid" in self.model_fields_set:
            _dict['accountUUID'] = None

        # set to None if remove_date (nullable) is None
        # and model_fields_set contains the field
        if self.remove_date is None and "remove_date" in self.model_fields_set:
            _dict['removeDate'] = None

        # set to None if assignment_id (nullable) is None
        # and model_fields_set contains the field
        if self.assignment_id is None and "assignment_id" in self.model_fields_set:
            _dict['assignmentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityEntitlementDetailsAccountTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountName": obj.get("accountName"),
            "accountUUID": obj.get("accountUUID"),
            "sourceId": obj.get("sourceId"),
            "sourceName": obj.get("sourceName"),
            "removeDate": obj.get("removeDate"),
            "assignmentId": obj.get("assignmentId"),
            "revocable": obj.get("revocable") if obj.get("revocable") is not None else False
        })
        return _obj


