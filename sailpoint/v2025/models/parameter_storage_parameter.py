# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ParameterStorageParameter(BaseModel):
    """
    A parameter that has been retrieved from the store.
    """ # noqa: E501
    id: StrictStr = Field(description="The ID of the reference")
    owner_id: StrictStr = Field(description="The ID of the user who owns the parameter.", alias="ownerId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the parameter. This cannot be changed after being set. Please see the types document for more information.")
    name: StrictStr = Field(description="The human-readable name of the parameter.")
    primary_field: Optional[StrictStr] = Field(default=None, description="The name of the primary field in the public fields.", alias="primaryField")
    public_fields: Dict[str, Any] = Field(description="The public fields stored for this parameter. See the types document for information about what can be stored.", alias="publicFields")
    description: Optional[StrictStr] = Field(default=None, description="Describe the parameter")
    last_modified_at: Optional[StrictStr] = Field(default=None, description="ISO8606 format datetime of the last time any field of the parameter was changed.", alias="lastModifiedAt")
    last_modified_by: Optional[StrictStr] = Field(default=None, description="The ID of the user who last modified the parameter. Empty when identity is not known.", alias="lastModifiedBy")
    private_fields_last_modified_at: Optional[StrictStr] = Field(default=None, description="ISO8606 format datetime of the time the secret fields were changed on the parameter.", alias="privateFieldsLastModifiedAt")
    private_fields_last_modified_by: Optional[StrictStr] = Field(default=None, description="The ID of the user who last modified the private fields. Empty when identity is not known.", alias="privateFieldsLastModifiedBy")
    __properties: ClassVar[List[str]] = ["id", "ownerId", "type", "name", "primaryField", "publicFields", "description", "lastModifiedAt", "lastModifiedBy", "privateFieldsLastModifiedAt", "privateFieldsLastModifiedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterStorageParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterStorageParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ownerId": obj.get("ownerId"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "primaryField": obj.get("primaryField"),
            "publicFields": obj.get("publicFields"),
            "description": obj.get("description"),
            "lastModifiedAt": obj.get("lastModifiedAt"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "privateFieldsLastModifiedAt": obj.get("privateFieldsLastModifiedAt"),
            "privateFieldsLastModifiedBy": obj.get("privateFieldsLastModifiedBy")
        })
        return _obj


