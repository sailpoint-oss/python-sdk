# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.requested_item_details import RequestedItemDetails
from typing import Optional, Set
from typing_extensions import Self

class AccessRequestTracking(BaseModel):
    """
    AccessRequestTracking
    """ # noqa: E501
    requested_for: Optional[StrictStr] = Field(default=None, description="The identity id in which the access request is for.", alias="requestedFor")
    requested_items_details: Optional[List[RequestedItemDetails]] = Field(default=None, description="The details of the item requested.", alias="requestedItemsDetails")
    attributes_hash: Optional[StrictInt] = Field(default=None, description="a hash representation of the access requested, useful for longer term tracking client side.", alias="attributesHash")
    access_request_ids: Optional[List[StrictStr]] = Field(default=None, description="a list of access request identifiers, generally only one will be populated, but high volume requested may result in multiple ids.", alias="accessRequestIds")
    __properties: ClassVar[List[str]] = ["requestedFor", "requestedItemsDetails", "attributesHash", "accessRequestIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessRequestTracking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requested_items_details (list)
        _items = []
        if self.requested_items_details:
            for _item_requested_items_details in self.requested_items_details:
                if _item_requested_items_details:
                    _items.append(_item_requested_items_details.to_dict())
            _dict['requestedItemsDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessRequestTracking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requestedFor": obj.get("requestedFor"),
            "requestedItemsDetails": [RequestedItemDetails.from_dict(_item) for _item in obj["requestedItemsDetails"]] if obj.get("requestedItemsDetails") is not None else None,
            "attributesHash": obj.get("attributesHash"),
            "accessRequestIds": obj.get("accessRequestIds")
        })
        return _obj


