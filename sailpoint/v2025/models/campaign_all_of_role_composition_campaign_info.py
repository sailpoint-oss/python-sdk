# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.campaign_all_of_role_composition_campaign_info_remediator_ref import CampaignAllOfRoleCompositionCampaignInfoRemediatorRef
from sailpoint.v2025.models.campaign_all_of_role_composition_campaign_info_reviewer import CampaignAllOfRoleCompositionCampaignInfoReviewer
from typing import Optional, Set
from typing_extensions import Self

class CampaignAllOfRoleCompositionCampaignInfo(BaseModel):
    """
    Optional configuration options for role composition campaigns.
    """ # noqa: E501
    reviewer_id: Optional[StrictStr] = Field(default=None, description="The ID of the identity or governance group reviewing this campaign. Deprecated in favor of the \"reviewer\" object.", alias="reviewerId")
    reviewer: Optional[CampaignAllOfRoleCompositionCampaignInfoReviewer] = None
    role_ids: Optional[List[StrictStr]] = Field(default=None, description="Optional list of roles to include in this campaign. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.", alias="roleIds")
    remediator_ref: CampaignAllOfRoleCompositionCampaignInfoRemediatorRef = Field(alias="remediatorRef")
    query: Optional[StrictStr] = Field(default=None, description="Optional search query to scope this campaign to a set of roles. Only one of `roleIds` and `query` may be set; if neither are set, all roles are included.")
    description: Optional[StrictStr] = Field(default=None, description="Describes this role composition campaign. Intended for storing the query used, and possibly the number of roles selected/available.")
    __properties: ClassVar[List[str]] = ["reviewerId", "reviewer", "roleIds", "remediatorRef", "query", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignAllOfRoleCompositionCampaignInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remediator_ref
        if self.remediator_ref:
            _dict['remediatorRef'] = self.remediator_ref.to_dict()
        # set to None if reviewer_id (nullable) is None
        # and model_fields_set contains the field
        if self.reviewer_id is None and "reviewer_id" in self.model_fields_set:
            _dict['reviewerId'] = None

        # set to None if reviewer (nullable) is None
        # and model_fields_set contains the field
        if self.reviewer is None and "reviewer" in self.model_fields_set:
            _dict['reviewer'] = None

        # set to None if query (nullable) is None
        # and model_fields_set contains the field
        if self.query is None and "query" in self.model_fields_set:
            _dict['query'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignAllOfRoleCompositionCampaignInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reviewerId": obj.get("reviewerId"),
            "reviewer": CampaignAllOfRoleCompositionCampaignInfoReviewer.from_dict(obj["reviewer"]) if obj.get("reviewer") is not None else None,
            "roleIds": obj.get("roleIds"),
            "remediatorRef": CampaignAllOfRoleCompositionCampaignInfoRemediatorRef.from_dict(obj["remediatorRef"]) if obj.get("remediatorRef") is not None else None,
            "query": obj.get("query"),
            "description": obj.get("description")
        })
        return _obj


