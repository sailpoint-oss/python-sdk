# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.event_bridge_config import EventBridgeConfig
from sailpoint.v2025.models.http_config import HttpConfig
from sailpoint.v2025.models.subscription_type import SubscriptionType
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionPostRequest(BaseModel):
    """
    SubscriptionPostRequest
    """ # noqa: E501
    name: StrictStr = Field(description="Subscription name.")
    description: Optional[StrictStr] = Field(default=None, description="Subscription description.")
    trigger_id: StrictStr = Field(description="ID of trigger subscribed to.", alias="triggerId")
    type: SubscriptionType
    response_deadline: Optional[StrictStr] = Field(default='PT1H', description="Deadline for completing REQUEST_RESPONSE trigger invocation, represented in ISO-8601 duration format.", alias="responseDeadline")
    http_config: Optional[HttpConfig] = Field(default=None, alias="httpConfig")
    event_bridge_config: Optional[EventBridgeConfig] = Field(default=None, alias="eventBridgeConfig")
    enabled: Optional[StrictBool] = Field(default=True, description="Whether subscription should receive real-time trigger invocations or not.  Test trigger invocations are always enabled regardless of this option.")
    filter: Optional[StrictStr] = Field(default=None, description="JSONPath filter to conditionally invoke trigger when expression evaluates to true.")
    __properties: ClassVar[List[str]] = ["name", "description", "triggerId", "type", "responseDeadline", "httpConfig", "eventBridgeConfig", "enabled", "filter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_config
        if self.http_config:
            _dict['httpConfig'] = self.http_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_bridge_config
        if self.event_bridge_config:
            _dict['eventBridgeConfig'] = self.event_bridge_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "triggerId": obj.get("triggerId"),
            "type": obj.get("type"),
            "responseDeadline": obj.get("responseDeadline") if obj.get("responseDeadline") is not None else 'PT1H',
            "httpConfig": HttpConfig.from_dict(obj["httpConfig"]) if obj.get("httpConfig") is not None else None,
            "eventBridgeConfig": EventBridgeConfig.from_dict(obj["eventBridgeConfig"]) if obj.get("eventBridgeConfig") is not None else None,
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "filter": obj.get("filter")
        })
        return _obj


