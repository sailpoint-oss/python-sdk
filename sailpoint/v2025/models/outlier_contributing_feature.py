# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from sailpoint.v2025.models.outlier_feature_translation import OutlierFeatureTranslation
from sailpoint.v2025.models.outlier_value_type import OutlierValueType
from typing import Optional, Set
from typing_extensions import Self

class OutlierContributingFeature(BaseModel):
    """
    OutlierContributingFeature
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Contributing feature id")
    name: Optional[StrictStr] = Field(default=None, description="The name of the feature")
    value_type: Optional[OutlierValueType] = Field(default=None, alias="valueType")
    value: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The feature value")
    importance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The importance of the feature. This can also be a negative value")
    display_name: Optional[StrictStr] = Field(default=None, description="The (translated if header is passed) displayName for the feature", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="The (translated if header is passed) description for the feature")
    translation_messages: Optional[OutlierFeatureTranslation] = Field(default=None, alias="translationMessages")
    __properties: ClassVar[List[str]] = ["id", "name", "valueType", "value", "importance", "displayName", "description", "translationMessages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutlierContributingFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value_type
        if self.value_type:
            _dict['valueType'] = self.value_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of translation_messages
        if self.translation_messages:
            _dict['translationMessages'] = self.translation_messages.to_dict()
        # set to None if translation_messages (nullable) is None
        # and model_fields_set contains the field
        if self.translation_messages is None and "translation_messages" in self.model_fields_set:
            _dict['translationMessages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutlierContributingFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "valueType": OutlierValueType.from_dict(obj["valueType"]) if obj.get("valueType") is not None else None,
            "value": obj.get("value"),
            "importance": obj.get("importance"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "translationMessages": OutlierFeatureTranslation.from_dict(obj["translationMessages"]) if obj.get("translationMessages") is not None else None
        })
        return _obj


