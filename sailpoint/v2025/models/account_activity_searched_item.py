# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.account_request import AccountRequest
from sailpoint.v2025.models.activity_identity import ActivityIdentity
from sailpoint.v2025.models.approval1 import Approval1
from sailpoint.v2025.models.expansion_item import ExpansionItem
from sailpoint.v2025.models.original_request import OriginalRequest
from typing import Optional, Set
from typing_extensions import Self

class AccountActivitySearchedItem(BaseModel):
    """
    AccountActivity
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID of account activity.")
    action: Optional[StrictStr] = Field(default=None, description="Type of action performed in the activity.")
    created: Optional[datetime] = Field(default=None, description="ISO-8601 date-time referring to the time when the object was created.")
    modified: Optional[datetime] = Field(default=None, description="ISO-8601 date-time referring to the time when the object was last modified.")
    synced: Optional[StrictStr] = Field(default=None, description="ISO-8601 date-time referring to the date-time when object was queued to be synced into search database for use in the search API.   This date-time changes anytime there is an update to the object, which triggers a synchronization event being sent to the search database.  There may be some delay between the `synced` time and the time when the updated data is actually available in the search API. ")
    stage: Optional[StrictStr] = Field(default=None, description="Activity's current stage.")
    status: Optional[StrictStr] = Field(default=None, description="Activity's current status.")
    requester: Optional[ActivityIdentity] = None
    recipient: Optional[ActivityIdentity] = None
    tracking_number: Optional[StrictStr] = Field(default=None, description="Account activity's tracking number.", alias="trackingNumber")
    errors: Optional[List[StrictStr]] = Field(default=None, description="Errors provided by the source while completing account actions.")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="Warnings provided by the source while completing account actions.")
    approvals: Optional[List[Approval1]] = Field(default=None, description="Approvals performed on an item during activity.")
    original_requests: Optional[List[OriginalRequest]] = Field(default=None, description="Original actions that triggered all individual source actions related to the account action.", alias="originalRequests")
    expansion_items: Optional[List[ExpansionItem]] = Field(default=None, description="Controls that translated the attribute requests into actual provisioning actions on the source.", alias="expansionItems")
    account_requests: Optional[List[AccountRequest]] = Field(default=None, description="Account data for each individual source action triggered by the original requests.", alias="accountRequests")
    sources: Optional[StrictStr] = Field(default=None, description="Sources involved in the account activity.")
    __properties: ClassVar[List[str]] = ["id", "action", "created", "modified", "synced", "stage", "status", "requester", "recipient", "trackingNumber", "errors", "warnings", "approvals", "originalRequests", "expansionItems", "accountRequests", "sources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountActivitySearchedItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in approvals (list)
        _items = []
        if self.approvals:
            for _item_approvals in self.approvals:
                if _item_approvals:
                    _items.append(_item_approvals.to_dict())
            _dict['approvals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in original_requests (list)
        _items = []
        if self.original_requests:
            for _item_original_requests in self.original_requests:
                if _item_original_requests:
                    _items.append(_item_original_requests.to_dict())
            _dict['originalRequests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expansion_items (list)
        _items = []
        if self.expansion_items:
            for _item_expansion_items in self.expansion_items:
                if _item_expansion_items:
                    _items.append(_item_expansion_items.to_dict())
            _dict['expansionItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_requests (list)
        _items = []
        if self.account_requests:
            for _item_account_requests in self.account_requests:
                if _item_account_requests:
                    _items.append(_item_account_requests.to_dict())
            _dict['accountRequests'] = _items
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountActivitySearchedItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "action": obj.get("action"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "synced": obj.get("synced"),
            "stage": obj.get("stage"),
            "status": obj.get("status"),
            "requester": ActivityIdentity.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "recipient": ActivityIdentity.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "trackingNumber": obj.get("trackingNumber"),
            "errors": obj.get("errors"),
            "warnings": obj.get("warnings"),
            "approvals": [Approval1.from_dict(_item) for _item in obj["approvals"]] if obj.get("approvals") is not None else None,
            "originalRequests": [OriginalRequest.from_dict(_item) for _item in obj["originalRequests"]] if obj.get("originalRequests") is not None else None,
            "expansionItems": [ExpansionItem.from_dict(_item) for _item in obj["expansionItems"]] if obj.get("expansionItems") is not None else None,
            "accountRequests": [AccountRequest.from_dict(_item) for _item in obj["accountRequests"]] if obj.get("accountRequests") is not None else None,
            "sources": obj.get("sources")
        })
        return _obj


