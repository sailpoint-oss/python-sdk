# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from sailpoint.v2025.models.access_item_requested_for_dto import AccessItemRequestedForDto
from sailpoint.v2025.models.access_item_requester_dto import AccessItemRequesterDto
from sailpoint.v2025.models.access_request_dynamic_approver_requested_items_inner import AccessRequestDynamicApproverRequestedItemsInner
from typing import Optional, Set
from typing_extensions import Self

class AccessRequestDynamicApprover(BaseModel):
    """
    AccessRequestDynamicApprover
    """ # noqa: E501
    access_request_id: StrictStr = Field(description="The unique ID of the access request object. Can be used with the [access request status endpoint](https://developer.sailpoint.com/idn/api/beta/list-access-request-status) to get the status of the request. ", alias="accessRequestId")
    requested_for: Annotated[List[AccessItemRequestedForDto], Field(min_length=1, max_length=10)] = Field(description="Identities access was requested for.", alias="requestedFor")
    requested_items: Annotated[List[AccessRequestDynamicApproverRequestedItemsInner], Field(min_length=1, max_length=25)] = Field(description="The access items that are being requested.", alias="requestedItems")
    requested_by: AccessItemRequesterDto = Field(alias="requestedBy")
    __properties: ClassVar[List[str]] = ["accessRequestId", "requestedFor", "requestedItems", "requestedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessRequestDynamicApprover from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requested_for (list)
        _items = []
        if self.requested_for:
            for _item_requested_for in self.requested_for:
                if _item_requested_for:
                    _items.append(_item_requested_for.to_dict())
            _dict['requestedFor'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in requested_items (list)
        _items = []
        if self.requested_items:
            for _item_requested_items in self.requested_items:
                if _item_requested_items:
                    _items.append(_item_requested_items.to_dict())
            _dict['requestedItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of requested_by
        if self.requested_by:
            _dict['requestedBy'] = self.requested_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessRequestDynamicApprover from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRequestId": obj.get("accessRequestId"),
            "requestedFor": [AccessItemRequestedForDto.from_dict(_item) for _item in obj["requestedFor"]] if obj.get("requestedFor") is not None else None,
            "requestedItems": [AccessRequestDynamicApproverRequestedItemsInner.from_dict(_item) for _item in obj["requestedItems"]] if obj.get("requestedItems") is not None else None,
            "requestedBy": AccessItemRequesterDto.from_dict(obj["requestedBy"]) if obj.get("requestedBy") is not None else None
        })
        return _obj


