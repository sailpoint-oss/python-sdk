# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sailpoint.v2025.models.form_condition import FormCondition
from sailpoint.v2025.models.form_definition_input import FormDefinitionInput
from sailpoint.v2025.models.form_element import FormElement
from sailpoint.v2025.models.form_owner import FormOwner
from sailpoint.v2025.models.form_used_by import FormUsedBy
from typing import Optional, Set
from typing_extensions import Self

class CreateFormDefinitionRequest(BaseModel):
    """
    CreateFormDefinitionRequest
    """ # noqa: E501
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=2000)]] = Field(default=None, description="Description is the form definition description")
    form_conditions: Optional[List[FormCondition]] = Field(default=None, description="FormConditions is the conditional logic that modify the form dynamically modify the form as the recipient is interacting out the form", alias="formConditions")
    form_elements: Optional[List[FormElement]] = Field(default=None, description="FormElements is a list of nested form elements", alias="formElements")
    form_input: Optional[List[FormDefinitionInput]] = Field(default=None, description="FormInput is a list of form inputs that are required when creating a form-instance object", alias="formInput")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name is the form definition name")
    owner: FormOwner
    used_by: Optional[List[FormUsedBy]] = Field(default=None, description="UsedBy is a list of objects where when any system uses a particular form it reaches out to the form service to record it is currently being used", alias="usedBy")
    __properties: ClassVar[List[str]] = ["description", "formConditions", "formElements", "formInput", "name", "owner", "usedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFormDefinitionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in form_conditions (list)
        _items = []
        if self.form_conditions:
            for _item_form_conditions in self.form_conditions:
                if _item_form_conditions:
                    _items.append(_item_form_conditions.to_dict())
            _dict['formConditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in form_elements (list)
        _items = []
        if self.form_elements:
            for _item_form_elements in self.form_elements:
                if _item_form_elements:
                    _items.append(_item_form_elements.to_dict())
            _dict['formElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in form_input (list)
        _items = []
        if self.form_input:
            for _item_form_input in self.form_input:
                if _item_form_input:
                    _items.append(_item_form_input.to_dict())
            _dict['formInput'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in used_by (list)
        _items = []
        if self.used_by:
            for _item_used_by in self.used_by:
                if _item_used_by:
                    _items.append(_item_used_by.to_dict())
            _dict['usedBy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFormDefinitionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "formConditions": [FormCondition.from_dict(_item) for _item in obj["formConditions"]] if obj.get("formConditions") is not None else None,
            "formElements": [FormElement.from_dict(_item) for _item in obj["formElements"]] if obj.get("formElements") is not None else None,
            "formInput": [FormDefinitionInput.from_dict(_item) for _item in obj["formInput"]] if obj.get("formInput") is not None else None,
            "name": obj.get("name"),
            "owner": FormOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "usedBy": [FormUsedBy.from_dict(_item) for _item in obj["usedBy"]] if obj.get("usedBy") is not None else None
        })
        return _obj


