# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.dependant_app_connections import DependantAppConnections
from sailpoint.v2025.models.dependant_connections_missing_dto import DependantConnectionsMissingDto
from sailpoint.v2025.models.identity_profiles_connections import IdentityProfilesConnections
from sailpoint.v2025.models.transform_read import TransformRead
from typing import Optional, Set
from typing_extensions import Self

class SourceConnectionsDto(BaseModel):
    """
    SourceConnectionsDto
    """ # noqa: E501
    identity_profiles: Optional[List[IdentityProfilesConnections]] = Field(default=None, description="The IdentityProfile attached to this source", alias="identityProfiles")
    credential_profiles: Optional[List[StrictStr]] = Field(default=None, description="Name of the CredentialProfile attached to this source", alias="credentialProfiles")
    source_attributes: Optional[List[StrictStr]] = Field(default=None, description="The attributes attached to this source", alias="sourceAttributes")
    mapping_profiles: Optional[List[StrictStr]] = Field(default=None, description="The profiles attached to this source", alias="mappingProfiles")
    dependent_custom_transforms: Optional[List[TransformRead]] = Field(default=None, description="A list of custom transforms associated with this source. A transform will be considered associated with a source if any attributes of the transform specify the source as the sourceName.", alias="dependentCustomTransforms")
    dependent_apps: Optional[List[DependantAppConnections]] = Field(default=None, alias="dependentApps")
    missing_dependents: Optional[List[DependantConnectionsMissingDto]] = Field(default=None, alias="missingDependents")
    __properties: ClassVar[List[str]] = ["identityProfiles", "credentialProfiles", "sourceAttributes", "mappingProfiles", "dependentCustomTransforms", "dependentApps", "missingDependents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceConnectionsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in identity_profiles (list)
        _items = []
        if self.identity_profiles:
            for _item_identity_profiles in self.identity_profiles:
                if _item_identity_profiles:
                    _items.append(_item_identity_profiles.to_dict())
            _dict['identityProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dependent_custom_transforms (list)
        _items = []
        if self.dependent_custom_transforms:
            for _item_dependent_custom_transforms in self.dependent_custom_transforms:
                if _item_dependent_custom_transforms:
                    _items.append(_item_dependent_custom_transforms.to_dict())
            _dict['dependentCustomTransforms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dependent_apps (list)
        _items = []
        if self.dependent_apps:
            for _item_dependent_apps in self.dependent_apps:
                if _item_dependent_apps:
                    _items.append(_item_dependent_apps.to_dict())
            _dict['dependentApps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in missing_dependents (list)
        _items = []
        if self.missing_dependents:
            for _item_missing_dependents in self.missing_dependents:
                if _item_missing_dependents:
                    _items.append(_item_missing_dependents.to_dict())
            _dict['missingDependents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceConnectionsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identityProfiles": [IdentityProfilesConnections.from_dict(_item) for _item in obj["identityProfiles"]] if obj.get("identityProfiles") is not None else None,
            "credentialProfiles": obj.get("credentialProfiles"),
            "sourceAttributes": obj.get("sourceAttributes"),
            "mappingProfiles": obj.get("mappingProfiles"),
            "dependentCustomTransforms": [TransformRead.from_dict(_item) for _item in obj["dependentCustomTransforms"]] if obj.get("dependentCustomTransforms") is not None else None,
            "dependentApps": [DependantAppConnections.from_dict(_item) for _item in obj["dependentApps"]] if obj.get("dependentApps") is not None else None,
            "missingDependents": [DependantConnectionsMissingDto.from_dict(_item) for _item in obj["missingDependents"]] if obj.get("missingDependents") is not None else None
        })
        return _obj


