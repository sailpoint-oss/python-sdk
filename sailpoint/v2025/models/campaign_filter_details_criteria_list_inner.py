# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.criteria_type import CriteriaType
from sailpoint.v2025.models.operation import Operation
from typing import Optional, Set
from typing_extensions import Self

class CampaignFilterDetailsCriteriaListInner(BaseModel):
    """
    CampaignFilterDetailsCriteriaListInner
    """ # noqa: E501
    type: CriteriaType
    operation: Optional[Operation] = None
    var_property: Optional[StrictStr] = Field(description="Specified key from the type of criteria.", alias="property")
    value: Optional[StrictStr] = Field(description="Value for the specified key from the type of criteria.")
    negate_result: Optional[StrictBool] = Field(default=False, description="If true, the filter will negate the result of the criteria.", alias="negateResult")
    short_circuit: Optional[StrictBool] = Field(default=False, description="If true, the filter will short circuit the evaluation of the criteria.", alias="shortCircuit")
    record_child_matches: Optional[StrictBool] = Field(default=False, description="If true, the filter will record child matches for the criteria.", alias="recordChildMatches")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the criteria.")
    suppress_matched_items: Optional[StrictBool] = Field(default=False, description="If this value is true, then matched items will not only be excluded from the campaign, they will also not have archived certification items created.  Such items will not appear in the exclusion report. ", alias="suppressMatchedItems")
    children: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of child criteria.")
    __properties: ClassVar[List[str]] = ["type", "operation", "property", "value", "negateResult", "shortCircuit", "recordChildMatches", "id", "suppressMatchedItems", "children"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignFilterDetailsCriteriaListInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if operation (nullable) is None
        # and model_fields_set contains the field
        if self.operation is None and "operation" in self.model_fields_set:
            _dict['operation'] = None

        # set to None if var_property (nullable) is None
        # and model_fields_set contains the field
        if self.var_property is None and "var_property" in self.model_fields_set:
            _dict['property'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignFilterDetailsCriteriaListInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "operation": obj.get("operation"),
            "property": obj.get("property"),
            "value": obj.get("value"),
            "negateResult": obj.get("negateResult") if obj.get("negateResult") is not None else False,
            "shortCircuit": obj.get("shortCircuit") if obj.get("shortCircuit") is not None else False,
            "recordChildMatches": obj.get("recordChildMatches") if obj.get("recordChildMatches") is not None else False,
            "id": obj.get("id"),
            "suppressMatchedItems": obj.get("suppressMatchedItems") if obj.get("suppressMatchedItems") is not None else False,
            "children": obj.get("children")
        })
        return _obj


