# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomPasswordInstruction(BaseModel):
    """
    CustomPasswordInstruction
    """ # noqa: E501
    page_id: Optional[StrictStr] = Field(default=None, description="The page ID that represents the page for forget user name, reset password and unlock account flow.", alias="pageId")
    page_content: Optional[StrictStr] = Field(default=None, description="The custom instructions for the specified page. Allow basic HTML format and maximum length is 1000 characters. The custom instructions will be sanitized to avoid attacks. If the customization text includes a link, like `<A HREF=\\\"URL\\\">...</A>` clicking on this will open the link on the current browser page. If you want your link to be redirected to a different page, please redirect it to \"_blank\" like this: `<a href=\\\"URL\" target=\\\"_blank\\\" >link</a>`. This will open a new tab when the link is clicked. Notice we're only supporting _blank as the redirection target. ", alias="pageContent")
    locale: Optional[StrictStr] = Field(default=None, description="The locale for the custom instructions, a BCP47 language tag. The default value is \\\"default\\\".")
    __properties: ClassVar[List[str]] = ["pageId", "pageContent", "locale"]

    @field_validator('page_id')
    def page_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['change-password:enter-password', 'change-password:finish', 'flow-selection:select', 'forget-username:user-email', 'mfa:enter-code', 'mfa:enter-kba', 'mfa:select', 'reset-password:enter-password', 'reset-password:enter-username', 'reset-password:finish', 'unlock-account:enter-username', 'unlock-account:finish']):
            warnings.warn(f"must be one of enum values ('change-password:enter-password', 'change-password:finish', 'flow-selection:select', 'forget-username:user-email', 'mfa:enter-code', 'mfa:enter-kba', 'mfa:select', 'reset-password:enter-password', 'reset-password:enter-username', 'reset-password:finish', 'unlock-account:enter-username', 'unlock-account:finish') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomPasswordInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomPasswordInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pageId": obj.get("pageId"),
            "pageContent": obj.get("pageContent"),
            "locale": obj.get("locale")
        })
        return _obj


