# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2025.models.cluster_manual_upgrade_jobs_inner_managed_process_configuration_ccg import ClusterManualUpgradeJobsInnerManagedProcessConfigurationCcg
from sailpoint.v2025.models.cluster_manual_upgrade_jobs_inner_managed_process_configuration_charon import ClusterManualUpgradeJobsInnerManagedProcessConfigurationCharon
from sailpoint.v2025.models.cluster_manual_upgrade_jobs_inner_managed_process_configuration_otel_agent import ClusterManualUpgradeJobsInnerManagedProcessConfigurationOtelAgent
from sailpoint.v2025.models.cluster_manual_upgrade_jobs_inner_managed_process_configuration_relay import ClusterManualUpgradeJobsInnerManagedProcessConfigurationRelay
from sailpoint.v2025.models.cluster_manual_upgrade_jobs_inner_managed_process_configuration_toolbox import ClusterManualUpgradeJobsInnerManagedProcessConfigurationToolbox
from typing import Optional, Set
from typing_extensions import Self

class ClusterManualUpgradeJobsInnerManagedProcessConfiguration(BaseModel):
    """
    Configuration of the managed processes involved in the upgrade.
    """ # noqa: E501
    charon: Optional[ClusterManualUpgradeJobsInnerManagedProcessConfigurationCharon] = None
    ccg: Optional[ClusterManualUpgradeJobsInnerManagedProcessConfigurationCcg] = None
    otel_agent: Optional[ClusterManualUpgradeJobsInnerManagedProcessConfigurationOtelAgent] = None
    relay: Optional[ClusterManualUpgradeJobsInnerManagedProcessConfigurationRelay] = None
    toolbox: Optional[ClusterManualUpgradeJobsInnerManagedProcessConfigurationToolbox] = None
    __properties: ClassVar[List[str]] = ["charon", "ccg", "otel_agent", "relay", "toolbox"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClusterManualUpgradeJobsInnerManagedProcessConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of charon
        if self.charon:
            _dict['charon'] = self.charon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ccg
        if self.ccg:
            _dict['ccg'] = self.ccg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of otel_agent
        if self.otel_agent:
            _dict['otel_agent'] = self.otel_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of relay
        if self.relay:
            _dict['relay'] = self.relay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toolbox
        if self.toolbox:
            _dict['toolbox'] = self.toolbox.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClusterManualUpgradeJobsInnerManagedProcessConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charon": ClusterManualUpgradeJobsInnerManagedProcessConfigurationCharon.from_dict(obj["charon"]) if obj.get("charon") is not None else None,
            "ccg": ClusterManualUpgradeJobsInnerManagedProcessConfigurationCcg.from_dict(obj["ccg"]) if obj.get("ccg") is not None else None,
            "otel_agent": ClusterManualUpgradeJobsInnerManagedProcessConfigurationOtelAgent.from_dict(obj["otel_agent"]) if obj.get("otel_agent") is not None else None,
            "relay": ClusterManualUpgradeJobsInnerManagedProcessConfigurationRelay.from_dict(obj["relay"]) if obj.get("relay") is not None else None,
            "toolbox": ClusterManualUpgradeJobsInnerManagedProcessConfigurationToolbox.from_dict(obj["toolbox"]) if obj.get("toolbox") is not None else None
        })
        return _obj


