# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HealthEvent(BaseModel):
    """
    Individual error or warning event
    """ # noqa: E501
    detailed_message: Optional[StrictStr] = Field(default=None, description="Description of the issue", alias="detailedMessage")
    uuid: Optional[StrictStr] = Field(default=None, description="Unique identifier for the health event")
    url: Optional[StrictStr] = Field(default=None, description="Optional URL associated with the issue")
    timestamp: Optional[datetime] = Field(default=None, description="Time when the event occurred")
    last_notified_time_stamp: Optional[datetime] = Field(default=None, description="Last time notification was sent for this issue", alias="lastNotifiedTimeStamp")
    cpu_utilization_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="CPU usage percentage", alias="cpuUtilizationPercentage")
    free_space_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Free memory percentage", alias="freeSpacePercentage")
    __properties: ClassVar[List[str]] = ["detailedMessage", "uuid", "url", "timestamp", "lastNotifiedTimeStamp", "cpuUtilizationPercentage", "freeSpacePercentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HealthEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if cpu_utilization_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_utilization_percentage is None and "cpu_utilization_percentage" in self.model_fields_set:
            _dict['cpuUtilizationPercentage'] = None

        # set to None if free_space_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.free_space_percentage is None and "free_space_percentage" in self.model_fields_set:
            _dict['freeSpacePercentage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HealthEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailedMessage": obj.get("detailedMessage"),
            "uuid": obj.get("uuid"),
            "url": obj.get("url"),
            "timestamp": obj.get("timestamp"),
            "lastNotifiedTimeStamp": obj.get("lastNotifiedTimeStamp"),
            "cpuUtilizationPercentage": obj.get("cpuUtilizationPercentage"),
            "freeSpacePercentage": obj.get("freeSpacePercentage")
        })
        return _obj


