# coding: utf-8

"""
    Identity Security Cloud V2025 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2025
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from sailpoint.v2025.models.import_object import ImportObject
from sailpoint.v2025.models.sp_config_message import SpConfigMessage
from typing import Optional, Set
from typing_extensions import Self

class ObjectImportResult(BaseModel):
    """
    Response model for import of a single object.
    """ # noqa: E501
    infos: List[SpConfigMessage] = Field(description="Informational messages returned from the target service on import.")
    warnings: List[SpConfigMessage] = Field(description="Warning messages returned from the target service on import.")
    errors: List[SpConfigMessage] = Field(description="Error messages returned from the target service on import.")
    imported_objects: List[ImportObject] = Field(description="References to objects that were created or updated by the import.", alias="importedObjects")
    __properties: ClassVar[List[str]] = ["infos", "warnings", "errors", "importedObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectImportResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in infos (list)
        _items = []
        if self.infos:
            for _item_infos in self.infos:
                if _item_infos:
                    _items.append(_item_infos.to_dict())
            _dict['infos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in imported_objects (list)
        _items = []
        if self.imported_objects:
            for _item_imported_objects in self.imported_objects:
                if _item_imported_objects:
                    _items.append(_item_imported_objects.to_dict())
            _dict['importedObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectImportResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "infos": [SpConfigMessage.from_dict(_item) for _item in obj["infos"]] if obj.get("infos") is not None else None,
            "warnings": [SpConfigMessage.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None,
            "errors": [SpConfigMessage.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "importedObjects": [ImportObject.from_dict(_item) for _item in obj["importedObjects"]] if obj.get("importedObjects") is not None else None
        })
        return _obj


