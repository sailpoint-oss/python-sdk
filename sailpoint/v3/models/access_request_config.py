# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v3.models.approval_reminder_and_escalation_config import ApprovalReminderAndEscalationConfig
from sailpoint.v3.models.entitlement_request_config import EntitlementRequestConfig
from sailpoint.v3.models.request_on_behalf_of_config import RequestOnBehalfOfConfig
from typing import Optional, Set
from typing_extensions import Self

class AccessRequestConfig(BaseModel):
    """
    AccessRequestConfig
    """ # noqa: E501
    approvals_must_be_external: Optional[StrictBool] = Field(default=False, description="If this is true, approvals must be processed by an external system. Also, if this is true, it blocks Request Center access requests and returns an error for any user who isn't an org admin.", alias="approvalsMustBeExternal")
    auto_approval_enabled: Optional[StrictBool] = Field(default=False, description="If this is true and the requester and reviewer are the same, the request is automatically approved.", alias="autoApprovalEnabled")
    reauthorization_enabled: Optional[StrictBool] = Field(default=False, description="If this is true, reauthorization will be enforced for appropriately configured access items. Enablement of this feature is currently in a limited state.", alias="reauthorizationEnabled")
    request_on_behalf_of_config: Optional[RequestOnBehalfOfConfig] = Field(default=None, alias="requestOnBehalfOfConfig")
    approval_reminder_and_escalation_config: Optional[ApprovalReminderAndEscalationConfig] = Field(default=None, alias="approvalReminderAndEscalationConfig")
    entitlement_request_config: Optional[EntitlementRequestConfig] = Field(default=None, alias="entitlementRequestConfig")
    __properties: ClassVar[List[str]] = ["approvalsMustBeExternal", "autoApprovalEnabled", "reauthorizationEnabled", "requestOnBehalfOfConfig", "approvalReminderAndEscalationConfig", "entitlementRequestConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessRequestConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request_on_behalf_of_config
        if self.request_on_behalf_of_config:
            _dict['requestOnBehalfOfConfig'] = self.request_on_behalf_of_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of approval_reminder_and_escalation_config
        if self.approval_reminder_and_escalation_config:
            _dict['approvalReminderAndEscalationConfig'] = self.approval_reminder_and_escalation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entitlement_request_config
        if self.entitlement_request_config:
            _dict['entitlementRequestConfig'] = self.entitlement_request_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessRequestConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvalsMustBeExternal": obj.get("approvalsMustBeExternal") if obj.get("approvalsMustBeExternal") is not None else False,
            "autoApprovalEnabled": obj.get("autoApprovalEnabled") if obj.get("autoApprovalEnabled") is not None else False,
            "reauthorizationEnabled": obj.get("reauthorizationEnabled") if obj.get("reauthorizationEnabled") is not None else False,
            "requestOnBehalfOfConfig": RequestOnBehalfOfConfig.from_dict(obj["requestOnBehalfOfConfig"]) if obj.get("requestOnBehalfOfConfig") is not None else None,
            "approvalReminderAndEscalationConfig": ApprovalReminderAndEscalationConfig.from_dict(obj["approvalReminderAndEscalationConfig"]) if obj.get("approvalReminderAndEscalationConfig") is not None else None,
            "entitlementRequestConfig": EntitlementRequestConfig.from_dict(obj["entitlementRequestConfig"]) if obj.get("entitlementRequestConfig") is not None else None
        })
        return _obj


