# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v3.models.schedule1 import Schedule1
from sailpoint.v3.models.search_schedule_recipients_inner import SearchScheduleRecipientsInner
from typing import Optional, Set
from typing_extensions import Self

class CreateScheduledSearchRequest(BaseModel):
    """
    CreateScheduledSearchRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the scheduled search. ")
    description: Optional[StrictStr] = Field(default=None, description="The description of the scheduled search. ")
    saved_search_id: StrictStr = Field(description="The ID of the saved search that will be executed.", alias="savedSearchId")
    created: Optional[datetime] = Field(default=None, description="The date the scheduled search was initially created.")
    modified: Optional[datetime] = Field(default=None, description="The last date the scheduled search was modified.")
    schedule: Schedule1
    recipients: List[SearchScheduleRecipientsInner] = Field(description="A list of identities that should receive the scheduled search report via email.")
    enabled: Optional[StrictBool] = Field(default=False, description="Indicates if the scheduled search is enabled. ")
    email_empty_results: Optional[StrictBool] = Field(default=False, description="Indicates if email generation should occur when search returns no results. ", alias="emailEmptyResults")
    display_query_details: Optional[StrictBool] = Field(default=False, description="Indicates if the generated email should include the query and search results preview (which could include PII). ", alias="displayQueryDetails")
    __properties: ClassVar[List[str]] = ["name", "description", "savedSearchId", "created", "modified", "schedule", "recipients", "enabled", "emailEmptyResults", "displayQueryDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateScheduledSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item_recipients in self.recipients:
                if _item_recipients:
                    _items.append(_item_recipients.to_dict())
            _dict['recipients'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateScheduledSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "savedSearchId": obj.get("savedSearchId"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "schedule": Schedule1.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "recipients": [SearchScheduleRecipientsInner.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "emailEmptyResults": obj.get("emailEmptyResults") if obj.get("emailEmptyResults") is not None else False,
            "displayQueryDetails": obj.get("displayQueryDetails") if obj.get("displayQueryDetails") is not None else False
        })
        return _obj


