# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v3.models.jit_configuration import JITConfiguration
from typing import Optional, Set
from typing_extensions import Self

class IdpDetails(BaseModel):
    """
    IdpDetails
    """ # noqa: E501
    role: Optional[StrictStr] = Field(default=None, description="Federation protocol role")
    entity_id: Optional[StrictStr] = Field(default=None, description="An entity ID is a globally unique name for a SAML entity, either an Identity Provider (IDP) or a Service Provider (SP).", alias="entityId")
    binding: Optional[StrictStr] = Field(default=None, description="Defines the binding used for the SAML flow. Used with IDP configurations.")
    authn_context: Optional[StrictStr] = Field(default=None, description="Specifies the SAML authentication method to use. Used with IDP configurations.", alias="authnContext")
    logout_url: Optional[StrictStr] = Field(default=None, description="The IDP logout URL. Used with IDP configurations.", alias="logoutUrl")
    include_authn_context: Optional[StrictBool] = Field(default=False, description="Determines if the configured AuthnContext should be used or the default. Used with IDP configurations.", alias="includeAuthnContext")
    name_id: Optional[StrictStr] = Field(default=None, description="The name id format to use. Used with IDP configurations.", alias="nameId")
    jit_configuration: Optional[JITConfiguration] = Field(default=None, alias="jitConfiguration")
    cert: Optional[StrictStr] = Field(default=None, description="The Base64-encoded certificate used by the IDP. Used with IDP configurations.")
    login_url_post: Optional[StrictStr] = Field(default=None, description="The IDP POST URL, used with IDP HTTP-POST bindings for IDP-initiated logins. Used with IDP configurations.", alias="loginUrlPost")
    login_url_redirect: Optional[StrictStr] = Field(default=None, description="The IDP Redirect URL. Used with IDP configurations.", alias="loginUrlRedirect")
    mapping_attribute: StrictStr = Field(description="Return the saml Id for the given user, based on the IDN as SP settings of the org. Used with IDP configurations.", alias="mappingAttribute")
    certificate_expiration_date: Optional[StrictStr] = Field(default=None, description="The expiration date extracted from the certificate.", alias="certificateExpirationDate")
    certificate_name: Optional[StrictStr] = Field(default=None, description="The name extracted from the certificate.", alias="certificateName")
    __properties: ClassVar[List[str]] = ["role", "entityId", "binding", "authnContext", "logoutUrl", "includeAuthnContext", "nameId", "jitConfiguration", "cert", "loginUrlPost", "loginUrlRedirect", "mappingAttribute", "certificateExpirationDate", "certificateName"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SAML_IDP', 'SAML_SP']):
            warnings.warn(f"must be one of enum values ('SAML_IDP', 'SAML_SP') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdpDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of jit_configuration
        if self.jit_configuration:
            _dict['jitConfiguration'] = self.jit_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdpDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "entityId": obj.get("entityId"),
            "binding": obj.get("binding"),
            "authnContext": obj.get("authnContext"),
            "logoutUrl": obj.get("logoutUrl"),
            "includeAuthnContext": obj.get("includeAuthnContext") if obj.get("includeAuthnContext") is not None else False,
            "nameId": obj.get("nameId"),
            "jitConfiguration": JITConfiguration.from_dict(obj["jitConfiguration"]) if obj.get("jitConfiguration") is not None else None,
            "cert": obj.get("cert"),
            "loginUrlPost": obj.get("loginUrlPost"),
            "loginUrlRedirect": obj.get("loginUrlRedirect"),
            "mappingAttribute": obj.get("mappingAttribute"),
            "certificateExpirationDate": obj.get("certificateExpirationDate"),
            "certificateName": obj.get("certificateName")
        })
        return _obj


