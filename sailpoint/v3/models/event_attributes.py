# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventAttributes(BaseModel):
    """
    Attributes related to an IdentityNow ETS event
    """ # noqa: E501
    id: Optional[StrictStr] = Field(description="The unique ID of the trigger")
    filter_: Optional[StrictStr] = Field(default=None, description="JSON path expression that will limit which events the trigger will fire on", alias="filter.$")
    description: Optional[StrictStr] = Field(default=None, description="Description of the event trigger")
    attribute_to_filter: Optional[StrictStr] = Field(default=None, description="The attribute to filter on", alias="attributeToFilter")
    form_definition_id: Optional[StrictStr] = Field(default=None, description="Form definition's unique identifier.", alias="formDefinitionId")
    __properties: ClassVar[List[str]] = ["id", "filter.$", "description", "attributeToFilter", "formDefinitionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if filter_ (nullable) is None
        # and model_fields_set contains the field
        if self.filter_ is None and "filter_" in self.model_fields_set:
            _dict['filter.$'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if attribute_to_filter (nullable) is None
        # and model_fields_set contains the field
        if self.attribute_to_filter is None and "attribute_to_filter" in self.model_fields_set:
            _dict['attributeToFilter'] = None

        # set to None if form_definition_id (nullable) is None
        # and model_fields_set contains the field
        if self.form_definition_id is None and "form_definition_id" in self.model_fields_set:
            _dict['formDefinitionId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "filter.$": obj.get("filter.$"),
            "description": obj.get("description"),
            "attributeToFilter": obj.get("attributeToFilter"),
            "formDefinitionId": obj.get("formDefinitionId")
        })
        return _obj


