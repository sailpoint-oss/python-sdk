# coding: utf-8

"""
    Identity Security Cloud V3 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v3.models.approval_status import ApprovalStatus
from sailpoint.v3.models.non_employee_approval_item_base import NonEmployeeApprovalItemBase
from sailpoint.v3.models.non_employee_source_lite import NonEmployeeSourceLite
from typing import Optional, Set
from typing_extensions import Self

class NonEmployeeRequest(BaseModel):
    """
    NonEmployeeRequest
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Non-Employee source id.")
    source_id: Optional[StrictStr] = Field(default=None, description="Source Id associated with this non-employee source.", alias="sourceId")
    name: Optional[StrictStr] = Field(default=None, description="Source name associated with this non-employee source.")
    description: Optional[StrictStr] = Field(default=None, description="Source description associated with this non-employee source.")
    account_name: Optional[StrictStr] = Field(default=None, description="Requested identity account name.", alias="accountName")
    first_name: Optional[StrictStr] = Field(default=None, description="Non-Employee's first name.", alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, description="Non-Employee's last name.", alias="lastName")
    email: Optional[StrictStr] = Field(default=None, description="Non-Employee's email.")
    phone: Optional[StrictStr] = Field(default=None, description="Non-Employee's phone.")
    manager: Optional[StrictStr] = Field(default=None, description="The account ID of a valid identity to serve as this non-employee's manager.")
    non_employee_source: Optional[NonEmployeeSourceLite] = Field(default=None, alias="nonEmployeeSource")
    data: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional attributes for a non-employee. Up to 10 custom attributes can be added.")
    approval_items: Optional[List[NonEmployeeApprovalItemBase]] = Field(default=None, description="List of approval item for the request", alias="approvalItems")
    approval_status: Optional[ApprovalStatus] = Field(default=None, alias="approvalStatus")
    comment: Optional[StrictStr] = Field(default=None, description="Comment of requester")
    completion_date: Optional[datetime] = Field(default=None, description="When the request was completely approved.", alias="completionDate")
    start_date: Optional[datetime] = Field(default=None, description="Non-Employee employment start date.", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="Non-Employee employment end date.", alias="endDate")
    modified: Optional[datetime] = Field(default=None, description="When the request was last modified.")
    created: Optional[datetime] = Field(default=None, description="When the request was created.")
    __properties: ClassVar[List[str]] = ["id", "sourceId", "name", "description", "accountName", "firstName", "lastName", "email", "phone", "manager", "nonEmployeeSource", "data", "approvalItems", "approvalStatus", "comment", "completionDate", "startDate", "endDate", "modified", "created"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NonEmployeeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of non_employee_source
        if self.non_employee_source:
            _dict['nonEmployeeSource'] = self.non_employee_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in approval_items (list)
        _items = []
        if self.approval_items:
            for _item_approval_items in self.approval_items:
                if _item_approval_items:
                    _items.append(_item_approval_items.to_dict())
            _dict['approvalItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NonEmployeeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "sourceId": obj.get("sourceId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "accountName": obj.get("accountName"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "manager": obj.get("manager"),
            "nonEmployeeSource": NonEmployeeSourceLite.from_dict(obj["nonEmployeeSource"]) if obj.get("nonEmployeeSource") is not None else None,
            "data": obj.get("data"),
            "approvalItems": [NonEmployeeApprovalItemBase.from_dict(_item) for _item in obj["approvalItems"]] if obj.get("approvalItems") is not None else None,
            "approvalStatus": obj.get("approvalStatus"),
            "comment": obj.get("comment"),
            "completionDate": obj.get("completionDate"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "modified": obj.get("modified"),
            "created": obj.get("created")
        })
        return _obj


