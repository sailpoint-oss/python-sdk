# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sailpoint.v2024.models.multi_host_sources import MultiHostSources

class TestMultiHostSources(unittest.TestCase):
    """MultiHostSources unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiHostSources:
        """Test MultiHostSources
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MultiHostSources`
        """
        model = MultiHostSources()
        if include_optional:
            return MultiHostSources(
                id = '2c91808568c529c60168cca6f90c1324',
                name = 'My Source',
                description = 'This is the Source.',
                owner = sailpoint.v2024.models.source_owner.Source_owner(
                    type = 'IDENTITY', 
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'MyName', ),
                cluster = sailpoint.v2024.models.source_cluster.Source_cluster(
                    type = 'CLUSTER', 
                    id = '2c9180866166b5b0016167c32ef31a66', 
                    name = 'Corporate Cluster', ),
                account_correlation_config = sailpoint.v2024.models.source_account_correlation_config.Source_accountCorrelationConfig(
                    type = 'ACCOUNT_CORRELATION_CONFIG', 
                    id = '2c9180855d191c59015d28583727245a', 
                    name = 'Directory [source-62867] Account Correlation', ),
                account_correlation_rule = sailpoint.v2024.models.source_account_correlation_rule.Source_accountCorrelationRule(
                    type = 'RULE', 
                    id = '2c918085708c274401708c2a8a760001', 
                    name = 'Example Rule', ),
                manager_correlation_mapping = sailpoint.v2024.models.manager_correlation_mapping.ManagerCorrelationMapping(
                    account_attribute_name = 'manager', 
                    identity_attribute_name = 'manager', ),
                manager_correlation_rule = sailpoint.v2024.models.source_manager_correlation_rule.Source_managerCorrelationRule(
                    type = 'RULE', 
                    id = '2c918085708c274401708c2a8a760001', 
                    name = 'Example Rule', ),
                before_provisioning_rule = sailpoint.v2024.models.source_before_provisioning_rule.Source_beforeProvisioningRule(
                    type = 'RULE', 
                    id = '2c918085708c274401708c2a8a760001', 
                    name = 'Example Rule', ),
                schemas = [{type=CONNECTOR_SCHEMA, id=2c9180835d191a86015d28455b4b232a, name=account}, {type=CONNECTOR_SCHEMA, id=2c9180835d191a86015d28455b4b232b, name=group}],
                password_policies = [{type=PASSWORD_POLICY, id=2c9180855d191c59015d291ceb053980, name=Corporate Password Policy}, {type=PASSWORD_POLICY, id=2c9180855d191c59015d291ceb057777, name=Vendor Password Policy}],
                features = [PROVISIONING, NO_PERMISSIONS_PROVISIONING, GROUPS_HAVE_MEMBERS],
                type = 'Multi-Host - Microsoft SQL Server',
                connector = 'multihost-microsoft-sql-server',
                connector_class = 'sailpoint.connector.OpenConnectorAdapter',
                connector_attributes = {healthCheckTimeout=30, authSearchAttributes=[cn, uid, mail]},
                delete_threshold = 10,
                authoritative = False,
                management_workgroup = sailpoint.v2024.models.source_management_workgroup.Source_managementWorkgroup(
                    type = 'GOVERNANCE_GROUP', 
                    id = '2c91808568c529c60168cca6f90c2222', 
                    name = 'My Management Workgroup', ),
                healthy = True,
                status = 'SOURCE_STATE_HEALTHY',
                since = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                connector_id = 'multihost-microsoft-sql-server',
                connector_name = 'Multi-Host Microsoft SQL Server',
                connection_type = 'file',
                connector_implementation_id = 'multihost-microsoft-sql-server',
                created = '2022-02-08T14:50:03.827Z',
                modified = '2024-01-23T18:08:50.897Z',
                credential_provider_enabled = False,
                category = 'CredentialProvider'
            )
        else:
            return MultiHostSources(
                id = '2c91808568c529c60168cca6f90c1324',
                name = 'My Source',
                owner = sailpoint.v2024.models.source_owner.Source_owner(
                    type = 'IDENTITY', 
                    id = '2c91808568c529c60168cca6f90c1313', 
                    name = 'MyName', ),
                connector = 'multihost-microsoft-sql-server',
                connector_name = 'Multi-Host Microsoft SQL Server',
        )
        """

    def testMultiHostSources(self):
        """Test MultiHostSources"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
