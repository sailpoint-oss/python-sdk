# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.role_mining_role_type import RoleMiningRoleType
from typing import Optional, Set
from typing_extensions import Self

class RoleMiningSessionDraftRoleDto(BaseModel):
    """
    RoleMiningSessionDraftRoleDto
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the draft role")
    description: Optional[StrictStr] = Field(default=None, description="Draft role description")
    identity_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of identities for this role mining session.", alias="identityIds")
    entitlement_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of entitlement ids for this role mining session.", alias="entitlementIds")
    excluded_entitlements: Optional[List[StrictStr]] = Field(default=None, description="The list of excluded entitlement ids.", alias="excludedEntitlements")
    modified: Optional[datetime] = Field(default=None, description="Last modified date")
    type: Optional[RoleMiningRoleType] = None
    id: Optional[StrictStr] = Field(default=None, description="Id of the potential draft role")
    created_date: Optional[datetime] = Field(default=None, description="The date-time when this potential draft role was created.", alias="createdDate")
    modified_date: Optional[datetime] = Field(default=None, description="The date-time when this potential draft role was modified.", alias="modifiedDate")
    __properties: ClassVar[List[str]] = ["name", "description", "identityIds", "entitlementIds", "excludedEntitlements", "modified", "type", "id", "createdDate", "modifiedDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleMiningSessionDraftRoleDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleMiningSessionDraftRoleDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "identityIds": obj.get("identityIds"),
            "entitlementIds": obj.get("entitlementIds"),
            "excludedEntitlements": obj.get("excludedEntitlements"),
            "modified": obj.get("modified"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "createdDate": obj.get("createdDate"),
            "modifiedDate": obj.get("modifiedDate")
        })
        return _obj


