# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.source_account_selections import SourceAccountSelections
from typing import Optional, Set
from typing_extensions import Self

class RequestedItemAccountSelections(BaseModel):
    """
    RequestedItemAccountSelections
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description for this requested item")
    accounts_selection_blocked: Optional[StrictBool] = Field(default=False, description="This field indicates if account selections are not allowed for this requested item. * If true, this field indicates that account selections will not be available for this item and user combination. In this case, no account selections should be provided in the access request for this item and user combination, irrespective of whether the user has single or multiple accounts on a source. * An example is where a user is requesting an access profile that is already assigned to one of their accounts. ", alias="accountsSelectionBlocked")
    accounts_selection_blocked_reason: Optional[StrictStr] = Field(default=None, description="If account selections are not allowed for an item, this field will denote the reason.", alias="accountsSelectionBlockedReason")
    type: Optional[StrictStr] = Field(default=None, description="The type of the item being requested.")
    id: Optional[StrictStr] = Field(default=None, description="The id of the requested item")
    name: Optional[StrictStr] = Field(default=None, description="The name of the requested item")
    sources: Optional[List[SourceAccountSelections]] = Field(default=None, description="The details for the sources and accounts for the requested item and identity combination")
    __properties: ClassVar[List[str]] = ["description", "accountsSelectionBlocked", "accountsSelectionBlockedReason", "type", "id", "name", "sources"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_PROFILE', 'ROLE', 'ENTITLEMENT']):
            warnings.warn(f"must be one of enum values ('ACCESS_PROFILE', 'ROLE', 'ENTITLEMENT') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestedItemAccountSelections from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        # set to None if accounts_selection_blocked_reason (nullable) is None
        # and model_fields_set contains the field
        if self.accounts_selection_blocked_reason is None and "accounts_selection_blocked_reason" in self.model_fields_set:
            _dict['accountsSelectionBlockedReason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestedItemAccountSelections from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "accountsSelectionBlocked": obj.get("accountsSelectionBlocked") if obj.get("accountsSelectionBlocked") is not None else False,
            "accountsSelectionBlockedReason": obj.get("accountsSelectionBlockedReason"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "sources": [SourceAccountSelections.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None
        })
        return _obj


