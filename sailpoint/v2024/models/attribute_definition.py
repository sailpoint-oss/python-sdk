# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.attribute_definition_schema import AttributeDefinitionSchema
from sailpoint.v2024.models.attribute_definition_type import AttributeDefinitionType
from typing import Optional, Set
from typing_extensions import Self

class AttributeDefinition(BaseModel):
    """
    AttributeDefinition
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the attribute.")
    type: Optional[AttributeDefinitionType] = None
    var_schema: Optional[AttributeDefinitionSchema] = Field(default=None, alias="schema")
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the attribute.")
    is_multi: Optional[StrictBool] = Field(default=False, description="Flag indicating whether or not the attribute is multi-valued.", alias="isMulti")
    is_entitlement: Optional[StrictBool] = Field(default=False, description="Flag indicating whether or not the attribute is an entitlement.", alias="isEntitlement")
    is_group: Optional[StrictBool] = Field(default=False, description="Flag indicating whether or not the attribute represents a group. This can only be `true` if `isEntitlement` is also `true` **and** there is a schema defined for the attribute.. ", alias="isGroup")
    __properties: ClassVar[List[str]] = ["name", "type", "schema", "description", "isMulti", "isEntitlement", "isGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # set to None if var_schema (nullable) is None
        # and model_fields_set contains the field
        if self.var_schema is None and "var_schema" in self.model_fields_set:
            _dict['schema'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "schema": AttributeDefinitionSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "description": obj.get("description"),
            "isMulti": obj.get("isMulti") if obj.get("isMulti") is not None else False,
            "isEntitlement": obj.get("isEntitlement") if obj.get("isEntitlement") is not None else False,
            "isGroup": obj.get("isGroup") if obj.get("isGroup") is not None else False
        })
        return _obj


