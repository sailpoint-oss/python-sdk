# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.service_provider_configuration_federation_protocol_details_inner import ServiceProviderConfigurationFederationProtocolDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class ServiceProviderConfiguration(BaseModel):
    """
    Represents the IdentityNow as Service Provider Configuration allowing customers to log into IDN via an Identity Provider
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=False, description="This determines whether or not the SAML authentication flow is enabled for an org")
    bypass_idp: Optional[StrictBool] = Field(default=False, description="This allows basic login with the parameter prompt=true. This is often toggled on when debugging SAML authentication setup. When false, only org admins with MFA-enabled can bypass the IDP.", alias="bypassIdp")
    saml_configuration_valid: Optional[StrictBool] = Field(default=False, description="This indicates whether or not the SAML configuration is valid.", alias="samlConfigurationValid")
    federation_protocol_details: Optional[List[ServiceProviderConfigurationFederationProtocolDetailsInner]] = Field(default=None, description="A list of the abstract implementations of the Federation Protocol details. Typically, this will include on SpDetails object and one IdpDetails object used in tandem to define a SAML integration between a customer's identity provider and a customer's SailPoint instance (i.e., the service provider).", alias="federationProtocolDetails")
    __properties: ClassVar[List[str]] = ["enabled", "bypassIdp", "samlConfigurationValid", "federationProtocolDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceProviderConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in federation_protocol_details (list)
        _items = []
        if self.federation_protocol_details:
            for _item_federation_protocol_details in self.federation_protocol_details:
                if _item_federation_protocol_details:
                    _items.append(_item_federation_protocol_details.to_dict())
            _dict['federationProtocolDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceProviderConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "bypassIdp": obj.get("bypassIdp") if obj.get("bypassIdp") is not None else False,
            "samlConfigurationValid": obj.get("samlConfigurationValid") if obj.get("samlConfigurationValid") is not None else False,
            "federationProtocolDetails": [ServiceProviderConfigurationFederationProtocolDetailsInner.from_dict(_item) for _item in obj["federationProtocolDetails"]] if obj.get("federationProtocolDetails") is not None else None
        })
        return _obj


