# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.base_reference_dto import BaseReferenceDto
from sailpoint.v2024.models.role_assignment_dto_assigner import RoleAssignmentDtoAssigner
from sailpoint.v2024.models.role_assignment_dto_assignment_context import RoleAssignmentDtoAssignmentContext
from sailpoint.v2024.models.role_target_dto import RoleTargetDto
from typing import Optional, Set
from typing_extensions import Self

class RoleAssignmentDto(BaseModel):
    """
    RoleAssignmentDto
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Assignment Id")
    role: Optional[BaseReferenceDto] = None
    comments: Optional[StrictStr] = Field(default=None, description="Comments added by the user when the assignment was made")
    assignment_source: Optional[StrictStr] = Field(default=None, description="Source describing how this assignment was made", alias="assignmentSource")
    assigner: Optional[RoleAssignmentDtoAssigner] = None
    assigned_dimensions: Optional[List[BaseReferenceDto]] = Field(default=None, description="Dimensions assigned related to this role", alias="assignedDimensions")
    assignment_context: Optional[RoleAssignmentDtoAssignmentContext] = Field(default=None, alias="assignmentContext")
    account_targets: Optional[List[RoleTargetDto]] = Field(default=None, alias="accountTargets")
    remove_date: Optional[StrictStr] = Field(default=None, description="Date that the assignment will be removed", alias="removeDate")
    __properties: ClassVar[List[str]] = ["id", "role", "comments", "assignmentSource", "assigner", "assignedDimensions", "assignmentContext", "accountTargets", "removeDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleAssignmentDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assigner
        if self.assigner:
            _dict['assigner'] = self.assigner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_dimensions (list)
        _items = []
        if self.assigned_dimensions:
            for _item_assigned_dimensions in self.assigned_dimensions:
                if _item_assigned_dimensions:
                    _items.append(_item_assigned_dimensions.to_dict())
            _dict['assignedDimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of assignment_context
        if self.assignment_context:
            _dict['assignmentContext'] = self.assignment_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in account_targets (list)
        _items = []
        if self.account_targets:
            for _item_account_targets in self.account_targets:
                if _item_account_targets:
                    _items.append(_item_account_targets.to_dict())
            _dict['accountTargets'] = _items
        # set to None if comments (nullable) is None
        # and model_fields_set contains the field
        if self.comments is None and "comments" in self.model_fields_set:
            _dict['comments'] = None

        # set to None if remove_date (nullable) is None
        # and model_fields_set contains the field
        if self.remove_date is None and "remove_date" in self.model_fields_set:
            _dict['removeDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleAssignmentDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "role": BaseReferenceDto.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "comments": obj.get("comments"),
            "assignmentSource": obj.get("assignmentSource"),
            "assigner": RoleAssignmentDtoAssigner.from_dict(obj["assigner"]) if obj.get("assigner") is not None else None,
            "assignedDimensions": [BaseReferenceDto.from_dict(_item) for _item in obj["assignedDimensions"]] if obj.get("assignedDimensions") is not None else None,
            "assignmentContext": RoleAssignmentDtoAssignmentContext.from_dict(obj["assignmentContext"]) if obj.get("assignmentContext") is not None else None,
            "accountTargets": [RoleTargetDto.from_dict(_item) for _item in obj["accountTargets"]] if obj.get("accountTargets") is not None else None,
            "removeDate": obj.get("removeDate")
        })
        return _obj


