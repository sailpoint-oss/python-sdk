# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.role_metadata_bulk_update_by_query_request_values_inner import RoleMetadataBulkUpdateByQueryRequestValuesInner
from typing import Optional, Set
from typing_extensions import Self

class RoleMetadataBulkUpdateByQueryRequest(BaseModel):
    """
    Bulk update by query request of Role metadata. The maximum meta data values that one single role assigned can not exceed 25. Custom metadata need suit licensed. For more information about the query could refer to  [V3 API Perform Search](https://developer.sailpoint.com/docs/api/v3/search-post)
    """ # noqa: E501
    query: Dict[str, Any] = Field(description="query the identities to be updated")
    operation: StrictStr = Field(description="The operation to be performed")
    replace_scope: Optional[StrictStr] = Field(default=None, description="The choice of update scope.", alias="replaceScope")
    values: List[RoleMetadataBulkUpdateByQueryRequestValuesInner] = Field(description="The metadata to be updated, including attribute key and value.")
    __properties: ClassVar[List[str]] = ["query", "operation", "replaceScope", "values"]

    @field_validator('operation')
    def operation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ADD', 'REMOVE', 'REPLACE']):
            warnings.warn(f"must be one of enum values ('ADD', 'REMOVE', 'REPLACE') unknown value: {value}")
        return value

    @field_validator('replace_scope')
    def replace_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'ATTRIBUTE']):
            warnings.warn(f"must be one of enum values ('ALL', 'ATTRIBUTE') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleMetadataBulkUpdateByQueryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleMetadataBulkUpdateByQueryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "operation": obj.get("operation"),
            "replaceScope": obj.get("replaceScope"),
            "values": [RoleMetadataBulkUpdateByQueryRequestValuesInner.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj


