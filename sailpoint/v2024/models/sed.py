# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Sed(BaseModel):
    """
    Suggested Entitlement Description
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="name of the entitlement", alias="Name")
    approved_by: Optional[StrictStr] = Field(default=None, description="entitlement approved by")
    approved_type: Optional[StrictStr] = Field(default=None, description="entitlement approved type")
    approved_when: Optional[datetime] = Field(default=None, description="entitlement approved then")
    attribute: Optional[StrictStr] = Field(default=None, description="entitlement attribute")
    description: Optional[StrictStr] = Field(default=None, description="description of entitlement")
    display_name: Optional[StrictStr] = Field(default=None, description="entitlement display name", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="sed id")
    source_id: Optional[StrictStr] = Field(default=None, description="entitlement source id", alias="sourceId")
    source_name: Optional[StrictStr] = Field(default=None, description="entitlement source name", alias="sourceName")
    status: Optional[StrictStr] = Field(default=None, description="entitlement status")
    suggested_description: Optional[StrictStr] = Field(default=None, description="llm suggested entitlement description", alias="suggestedDescription")
    type: Optional[StrictStr] = Field(default=None, description="entitlement type")
    value: Optional[StrictStr] = Field(default=None, description="entitlement value")
    __properties: ClassVar[List[str]] = ["Name", "approved_by", "approved_type", "approved_when", "attribute", "description", "displayName", "id", "sourceId", "sourceName", "status", "suggestedDescription", "type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "approved_by": obj.get("approved_by"),
            "approved_type": obj.get("approved_type"),
            "approved_when": obj.get("approved_when"),
            "attribute": obj.get("attribute"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "sourceId": obj.get("sourceId"),
            "sourceName": obj.get("sourceName"),
            "status": obj.get("status"),
            "suggestedDescription": obj.get("suggestedDescription"),
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj


