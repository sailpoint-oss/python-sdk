# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RecommendationConfigDto(BaseModel):
    """
    RecommendationConfigDto
    """ # noqa: E501
    recommender_features: Optional[List[StrictStr]] = Field(default=None, description="List of identity attributes to use for calculating certification recommendations", alias="recommenderFeatures")
    peer_group_percentage_threshold: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The percent value that the recommendation calculation must surpass to produce a YES recommendation", alias="peerGroupPercentageThreshold")
    run_auto_select_once: Optional[StrictBool] = Field(default=False, description="If true, rulesRecommenderConfig will be refreshed with new programatically selected attribute and threshold values on the next pipeline run", alias="runAutoSelectOnce")
    only_tune_threshold: Optional[StrictBool] = Field(default=False, description="If true, rulesRecommenderConfig will be refreshed with new programatically selected threshold values on the next pipeline run", alias="onlyTuneThreshold")
    __properties: ClassVar[List[str]] = ["recommenderFeatures", "peerGroupPercentageThreshold", "runAutoSelectOnce", "onlyTuneThreshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationConfigDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationConfigDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "recommenderFeatures": obj.get("recommenderFeatures"),
            "peerGroupPercentageThreshold": obj.get("peerGroupPercentageThreshold"),
            "runAutoSelectOnce": obj.get("runAutoSelectOnce") if obj.get("runAutoSelectOnce") is not None else False,
            "onlyTuneThreshold": obj.get("onlyTuneThreshold") if obj.get("onlyTuneThreshold") is not None else False
        })
        return _obj


