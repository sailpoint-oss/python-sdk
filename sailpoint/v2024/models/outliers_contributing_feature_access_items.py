# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutliersContributingFeatureAccessItems(BaseModel):
    """
    OutliersContributingFeatureAccessItems
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the access item")
    display_name: Optional[StrictStr] = Field(default=None, description="the display name of the access item", alias="displayName")
    description: Optional[StrictStr] = Field(default=None, description="Description of the access item.")
    access_type: Optional[StrictStr] = Field(default=None, description="The type of the access item.", alias="accessType")
    source_name: Optional[StrictStr] = Field(default=None, description="the associated source name if it exists", alias="sourceName")
    extremely_rare: Optional[StrictBool] = Field(default=False, description="rarest access", alias="extremelyRare")
    __properties: ClassVar[List[str]] = ["id", "displayName", "description", "accessType", "sourceName", "extremelyRare"]

    @field_validator('access_type')
    def access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITLEMENT', 'ACCESS_PROFILE', 'ROLE']):
            warnings.warn(f"must be one of enum values ('ENTITLEMENT', 'ACCESS_PROFILE', 'ROLE') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutliersContributingFeatureAccessItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutliersContributingFeatureAccessItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "displayName": obj.get("displayName"),
            "description": obj.get("description"),
            "accessType": obj.get("accessType"),
            "sourceName": obj.get("sourceName"),
            "extremelyRare": obj.get("extremelyRare") if obj.get("extremelyRare") is not None else False
        })
        return _obj


