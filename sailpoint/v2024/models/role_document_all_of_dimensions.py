# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.base_access_profile import BaseAccessProfile
from sailpoint.v2024.models.role_document_all_of_entitlements1 import RoleDocumentAllOfEntitlements1
from typing import Optional, Set
from typing_extensions import Self

class RoleDocumentAllOfDimensions(BaseModel):
    """
    RoleDocumentAllOfDimensions
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of the dimension.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the dimension.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the dimension.")
    entitlements: Optional[List[RoleDocumentAllOfEntitlements1]] = Field(default=None, description="Entitlements included with the role.")
    access_profiles: Optional[List[BaseAccessProfile]] = Field(default=None, description="Access profiles included in the dimension.", alias="accessProfiles")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "entitlements", "accessProfiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleDocumentAllOfDimensions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in entitlements (list)
        _items = []
        if self.entitlements:
            for _item_entitlements in self.entitlements:
                if _item_entitlements:
                    _items.append(_item_entitlements.to_dict())
            _dict['entitlements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in access_profiles (list)
        _items = []
        if self.access_profiles:
            for _item_access_profiles in self.access_profiles:
                if _item_access_profiles:
                    _items.append(_item_access_profiles.to_dict())
            _dict['accessProfiles'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if entitlements (nullable) is None
        # and model_fields_set contains the field
        if self.entitlements is None and "entitlements" in self.model_fields_set:
            _dict['entitlements'] = None

        # set to None if access_profiles (nullable) is None
        # and model_fields_set contains the field
        if self.access_profiles is None and "access_profiles" in self.model_fields_set:
            _dict['accessProfiles'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleDocumentAllOfDimensions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "entitlements": [RoleDocumentAllOfEntitlements1.from_dict(_item) for _item in obj["entitlements"]] if obj.get("entitlements") is not None else None,
            "accessProfiles": [BaseAccessProfile.from_dict(_item) for _item in obj["accessProfiles"]] if obj.get("accessProfiles") is not None else None
        })
        return _obj


