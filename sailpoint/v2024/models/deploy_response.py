# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeployResponse(BaseModel):
    """
    DeployResponse
    """ # noqa: E501
    job_id: Optional[StrictStr] = Field(default=None, description="Unique id assigned to this job.", alias="jobId")
    status: Optional[StrictStr] = Field(default=None, description="Status of the job.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the job, will always be CONFIG_DEPLOY_DRAFT for this type of job.")
    message: Optional[StrictStr] = Field(default=None, description="Message providing information about the outcome of the deploy process.")
    requester_name: Optional[StrictStr] = Field(default=None, description="The name of the user that initiated the deploy process.", alias="requesterName")
    file_exists: Optional[StrictBool] = Field(default=True, description="Whether or not a results file was created and stored for this deploy.", alias="fileExists")
    created: Optional[datetime] = Field(default=None, description="The time the job was started.")
    modified: Optional[datetime] = Field(default=None, description="The time of the last update to the job.")
    completed: Optional[datetime] = Field(default=None, description="The time the job was completed.")
    draft_id: Optional[StrictStr] = Field(default=None, description="The id of the draft that was used for this deploy.", alias="draftId")
    draft_name: Optional[StrictStr] = Field(default=None, description="The name of the draft that was used for this deploy.", alias="draftName")
    cloud_storage_status: Optional[StrictStr] = Field(default=None, description="Whether this deploy results file has been transferred to a customer storage location.", alias="cloudStorageStatus")
    __properties: ClassVar[List[str]] = ["jobId", "status", "type", "message", "requesterName", "fileExists", "created", "modified", "completed", "draftId", "draftName", "cloudStorageStatus"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED']):
            warnings.warn(f"must be one of enum values ('NOT_STARTED', 'IN_PROGRESS', 'COMPLETE', 'CANCELLED', 'FAILED') unknown value: {value}")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONFIG_DEPLOY_DRAFT']):
            warnings.warn(f"must be one of enum values ('CONFIG_DEPLOY_DRAFT') unknown value: {value}")
        return value

    @field_validator('cloud_storage_status')
    def cloud_storage_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYNCED', 'NOT_SYNCED', 'SYNC_FAILED']):
            warnings.warn(f"must be one of enum values ('SYNCED', 'NOT_SYNCED', 'SYNC_FAILED') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobId": obj.get("jobId"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "message": obj.get("message"),
            "requesterName": obj.get("requesterName"),
            "fileExists": obj.get("fileExists") if obj.get("fileExists") is not None else True,
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "completed": obj.get("completed"),
            "draftId": obj.get("draftId"),
            "draftName": obj.get("draftName"),
            "cloudStorageStatus": obj.get("cloudStorageStatus")
        })
        return _obj


