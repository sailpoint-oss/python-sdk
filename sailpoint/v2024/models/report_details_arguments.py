# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from sailpoint.v2024.models.accounts_export_report_arguments import AccountsExportReportArguments
from sailpoint.v2024.models.identities_details_report_arguments import IdentitiesDetailsReportArguments
from sailpoint.v2024.models.identities_report_arguments import IdentitiesReportArguments
from sailpoint.v2024.models.identity_profile_identity_error_report_arguments import IdentityProfileIdentityErrorReportArguments
from sailpoint.v2024.models.orphan_identities_report_arguments import OrphanIdentitiesReportArguments
from sailpoint.v2024.models.search_export_report_arguments import SearchExportReportArguments
from sailpoint.v2024.models.uncorrelated_accounts_report_arguments import UncorrelatedAccountsReportArguments
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

REPORTDETAILSARGUMENTS_ANY_OF_SCHEMAS = ["AccountsExportReportArguments", "IdentitiesDetailsReportArguments", "IdentitiesReportArguments", "IdentityProfileIdentityErrorReportArguments", "OrphanIdentitiesReportArguments", "SearchExportReportArguments", "UncorrelatedAccountsReportArguments"]

class ReportDetailsArguments(BaseModel):
    """
    The string-object map(dictionary) with the arguments needed for report processing.
    """

    # data type: AccountsExportReportArguments
    anyof_schema_1_validator: Optional[AccountsExportReportArguments] = None
    # data type: IdentitiesDetailsReportArguments
    anyof_schema_2_validator: Optional[IdentitiesDetailsReportArguments] = None
    # data type: IdentitiesReportArguments
    anyof_schema_3_validator: Optional[IdentitiesReportArguments] = None
    # data type: IdentityProfileIdentityErrorReportArguments
    anyof_schema_4_validator: Optional[IdentityProfileIdentityErrorReportArguments] = None
    # data type: OrphanIdentitiesReportArguments
    anyof_schema_5_validator: Optional[OrphanIdentitiesReportArguments] = None
    # data type: SearchExportReportArguments
    anyof_schema_6_validator: Optional[SearchExportReportArguments] = None
    # data type: UncorrelatedAccountsReportArguments
    anyof_schema_7_validator: Optional[UncorrelatedAccountsReportArguments] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[AccountsExportReportArguments, IdentitiesDetailsReportArguments, IdentitiesReportArguments, IdentityProfileIdentityErrorReportArguments, OrphanIdentitiesReportArguments, SearchExportReportArguments, UncorrelatedAccountsReportArguments]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "AccountsExportReportArguments", "IdentitiesDetailsReportArguments", "IdentitiesReportArguments", "IdentityProfileIdentityErrorReportArguments", "OrphanIdentitiesReportArguments", "SearchExportReportArguments", "UncorrelatedAccountsReportArguments" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = ReportDetailsArguments.model_construct()
        error_messages = []
        # validate data type: AccountsExportReportArguments
        if not isinstance(v, AccountsExportReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AccountsExportReportArguments`")
        else:
            return v

        # validate data type: IdentitiesDetailsReportArguments
        if not isinstance(v, IdentitiesDetailsReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentitiesDetailsReportArguments`")
        else:
            return v

        # validate data type: IdentitiesReportArguments
        if not isinstance(v, IdentitiesReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentitiesReportArguments`")
        else:
            return v

        # validate data type: IdentityProfileIdentityErrorReportArguments
        if not isinstance(v, IdentityProfileIdentityErrorReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdentityProfileIdentityErrorReportArguments`")
        else:
            return v

        # validate data type: OrphanIdentitiesReportArguments
        if not isinstance(v, OrphanIdentitiesReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrphanIdentitiesReportArguments`")
        else:
            return v

        # validate data type: SearchExportReportArguments
        if not isinstance(v, SearchExportReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchExportReportArguments`")
        else:
            return v

        # validate data type: UncorrelatedAccountsReportArguments
        if not isinstance(v, UncorrelatedAccountsReportArguments):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UncorrelatedAccountsReportArguments`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in ReportDetailsArguments with anyOf schemas: AccountsExportReportArguments, IdentitiesDetailsReportArguments, IdentitiesReportArguments, IdentityProfileIdentityErrorReportArguments, OrphanIdentitiesReportArguments, SearchExportReportArguments, UncorrelatedAccountsReportArguments. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[AccountsExportReportArguments] = None
        try:
            instance.actual_instance = AccountsExportReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[IdentitiesDetailsReportArguments] = None
        try:
            instance.actual_instance = IdentitiesDetailsReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[IdentitiesReportArguments] = None
        try:
            instance.actual_instance = IdentitiesReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[IdentityProfileIdentityErrorReportArguments] = None
        try:
            instance.actual_instance = IdentityProfileIdentityErrorReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[OrphanIdentitiesReportArguments] = None
        try:
            instance.actual_instance = OrphanIdentitiesReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[SearchExportReportArguments] = None
        try:
            instance.actual_instance = SearchExportReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[UncorrelatedAccountsReportArguments] = None
        try:
            instance.actual_instance = UncorrelatedAccountsReportArguments.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ReportDetailsArguments with anyOf schemas: AccountsExportReportArguments, IdentitiesDetailsReportArguments, IdentitiesReportArguments, IdentityProfileIdentityErrorReportArguments, OrphanIdentitiesReportArguments, SearchExportReportArguments, UncorrelatedAccountsReportArguments. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AccountsExportReportArguments, IdentitiesDetailsReportArguments, IdentitiesReportArguments, IdentityProfileIdentityErrorReportArguments, OrphanIdentitiesReportArguments, SearchExportReportArguments, UncorrelatedAccountsReportArguments]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


