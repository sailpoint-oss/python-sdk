# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.membership_type import MembershipType
from sailpoint.v2024.models.ref import Ref
from sailpoint.v2024.models.scope import Scope
from sailpoint.v2024.models.visibility_criteria import VisibilityCriteria
from typing import Optional, Set
from typing_extensions import Self

class DataSegment(BaseModel):
    """
    DataSegment
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The segment's ID.")
    name: Optional[StrictStr] = Field(default=None, description="The segment's business name.")
    created: Optional[datetime] = Field(default=None, description="The time when the segment is created.")
    modified: Optional[datetime] = Field(default=None, description="The time when the segment is modified.")
    description: Optional[StrictStr] = Field(default=None, description="The segment's optional description.")
    scopes: Optional[List[Scope]] = Field(default=None, description="List of Scopes that are assigned to the segment")
    member_selection: Optional[List[Ref]] = Field(default=None, description="List of Identities that are assigned to the segment", alias="memberSelection")
    member_filter: Optional[VisibilityCriteria] = Field(default=None, alias="memberFilter")
    membership: Optional[MembershipType] = None
    enabled: Optional[StrictBool] = Field(default=False, description="This boolean indicates whether the segment is currently active. Inactive segments have no effect.")
    published: Optional[StrictBool] = Field(default=False, description="This boolean indicates whether the segment is being applied to the accounts. If unpublished its being actively modified to until published")
    __properties: ClassVar[List[str]] = ["id", "name", "created", "modified", "description", "scopes", "memberSelection", "memberFilter", "membership", "enabled", "published"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scopes (list)
        _items = []
        if self.scopes:
            for _item_scopes in self.scopes:
                if _item_scopes:
                    _items.append(_item_scopes.to_dict())
            _dict['scopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in member_selection (list)
        _items = []
        if self.member_selection:
            for _item_member_selection in self.member_selection:
                if _item_member_selection:
                    _items.append(_item_member_selection.to_dict())
            _dict['memberSelection'] = _items
        # override the default output from pydantic by calling `to_dict()` of member_filter
        if self.member_filter:
            _dict['memberFilter'] = self.member_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "description": obj.get("description"),
            "scopes": [Scope.from_dict(_item) for _item in obj["scopes"]] if obj.get("scopes") is not None else None,
            "memberSelection": [Ref.from_dict(_item) for _item in obj["memberSelection"]] if obj.get("memberSelection") is not None else None,
            "memberFilter": VisibilityCriteria.from_dict(obj["memberFilter"]) if obj.get("memberFilter") is not None else None,
            "membership": obj.get("membership"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "published": obj.get("published") if obj.get("published") is not None else False
        })
        return _obj


