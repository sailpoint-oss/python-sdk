# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from sailpoint.v2024.models.va_cluster_status_change_event_application import VAClusterStatusChangeEventApplication
from sailpoint.v2024.models.va_cluster_status_change_event_health_check_result import VAClusterStatusChangeEventHealthCheckResult
from sailpoint.v2024.models.va_cluster_status_change_event_previous_health_check_result import VAClusterStatusChangeEventPreviousHealthCheckResult
from typing import Optional, Set
from typing_extensions import Self

class VAClusterStatusChangeEvent(BaseModel):
    """
    VAClusterStatusChangeEvent
    """ # noqa: E501
    created: datetime = Field(description="The date and time the status change occurred.")
    type: Dict[str, Any] = Field(description="The type of the object that initiated this event.")
    application: VAClusterStatusChangeEventApplication
    health_check_result: VAClusterStatusChangeEventHealthCheckResult = Field(alias="healthCheckResult")
    previous_health_check_result: VAClusterStatusChangeEventPreviousHealthCheckResult = Field(alias="previousHealthCheckResult")
    __properties: ClassVar[List[str]] = ["created", "type", "application", "healthCheckResult", "previousHealthCheckResult"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SOURCE', 'CLUSTER']):
            warnings.warn(f"must be one of enum values ('SOURCE', 'CLUSTER') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VAClusterStatusChangeEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_check_result
        if self.health_check_result:
            _dict['healthCheckResult'] = self.health_check_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_health_check_result
        if self.previous_health_check_result:
            _dict['previousHealthCheckResult'] = self.previous_health_check_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VAClusterStatusChangeEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created": obj.get("created"),
            "type": obj.get("type"),
            "application": VAClusterStatusChangeEventApplication.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "healthCheckResult": VAClusterStatusChangeEventHealthCheckResult.from_dict(obj["healthCheckResult"]) if obj.get("healthCheckResult") is not None else None,
            "previousHealthCheckResult": VAClusterStatusChangeEventPreviousHealthCheckResult.from_dict(obj["previousHealthCheckResult"]) if obj.get("previousHealthCheckResult") is not None else None
        })
        return _obj


