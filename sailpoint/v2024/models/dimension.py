# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sailpoint.v2024.models.access_profile_ref import AccessProfileRef
from sailpoint.v2024.models.dimension_membership_selector import DimensionMembershipSelector
from sailpoint.v2024.models.entitlement_ref import EntitlementRef
from sailpoint.v2024.models.owner_reference import OwnerReference
from typing import Optional, Set
from typing_extensions import Self

class Dimension(BaseModel):
    """
    A Dimension
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id of the Dimension. This field must be left null when creating a dimension, otherwise a 400 Bad Request error will result.")
    name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The human-readable display name of the Dimension")
    created: Optional[datetime] = Field(default=None, description="Date the Dimension was created")
    modified: Optional[datetime] = Field(default=None, description="Date the Dimension was last modified.")
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the Dimension")
    owner: OwnerReference
    access_profiles: Optional[List[AccessProfileRef]] = Field(default=None, alias="accessProfiles")
    entitlements: Optional[List[EntitlementRef]] = None
    membership: Optional[DimensionMembershipSelector] = None
    parent_id: Optional[StrictStr] = Field(default=None, description="The ID of the parent role. This field can be left null when creating a dimension, but if provided, it must match the role ID specified in the path variable of the API call.", alias="parentId")
    __properties: ClassVar[List[str]] = ["id", "name", "created", "modified", "description", "owner", "accessProfiles", "entitlements", "membership", "parentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dimension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_profiles (list)
        _items = []
        if self.access_profiles:
            for _item_access_profiles in self.access_profiles:
                if _item_access_profiles:
                    _items.append(_item_access_profiles.to_dict())
            _dict['accessProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entitlements (list)
        _items = []
        if self.entitlements:
            for _item_entitlements in self.entitlements:
                if _item_entitlements:
                    _items.append(_item_entitlements.to_dict())
            _dict['entitlements'] = _items
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if access_profiles (nullable) is None
        # and model_fields_set contains the field
        if self.access_profiles is None and "access_profiles" in self.model_fields_set:
            _dict['accessProfiles'] = None

        # set to None if membership (nullable) is None
        # and model_fields_set contains the field
        if self.membership is None and "membership" in self.model_fields_set:
            _dict['membership'] = None

        # set to None if parent_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_id is None and "parent_id" in self.model_fields_set:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dimension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "description": obj.get("description"),
            "owner": OwnerReference.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "accessProfiles": [AccessProfileRef.from_dict(_item) for _item in obj["accessProfiles"]] if obj.get("accessProfiles") is not None else None,
            "entitlements": [EntitlementRef.from_dict(_item) for _item in obj["entitlements"]] if obj.get("entitlements") is not None else None,
            "membership": DimensionMembershipSelector.from_dict(obj["membership"]) if obj.get("membership") is not None else None,
            "parentId": obj.get("parentId")
        })
        return _obj


