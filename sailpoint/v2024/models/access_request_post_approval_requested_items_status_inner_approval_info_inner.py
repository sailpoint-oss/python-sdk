# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.access_request_post_approval_requested_items_status_inner_approval_info_inner_approver import AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApprover
from typing import Optional, Set
from typing_extensions import Self

class AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInner(BaseModel):
    """
    AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInner
    """ # noqa: E501
    approval_comment: Optional[StrictStr] = Field(default=None, description="A comment left by the approver.", alias="approvalComment")
    approval_decision: Dict[str, Any] = Field(description="The final decision of the approver.", alias="approvalDecision")
    approver_name: StrictStr = Field(description="The name of the approver", alias="approverName")
    approver: AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApprover
    __properties: ClassVar[List[str]] = ["approvalComment", "approvalDecision", "approverName", "approver"]

    @field_validator('approval_decision')
    def approval_decision_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['APPROVED', 'DENIED']):
            warnings.warn(f"must be one of enum values ('APPROVED', 'DENIED') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of approver
        if self.approver:
            _dict['approver'] = self.approver.to_dict()
        # set to None if approval_comment (nullable) is None
        # and model_fields_set contains the field
        if self.approval_comment is None and "approval_comment" in self.model_fields_set:
            _dict['approvalComment'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvalComment": obj.get("approvalComment"),
            "approvalDecision": obj.get("approvalDecision"),
            "approverName": obj.get("approverName"),
            "approver": AccessRequestPostApprovalRequestedItemsStatusInnerApprovalInfoInnerApprover.from_dict(obj["approver"]) if obj.get("approver") is not None else None
        })
        return _obj


