# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.activity_insights import ActivityInsights
from sailpoint.v2024.models.dto_type import DtoType
from sailpoint.v2024.models.reviewable_entitlement_account_owner import ReviewableEntitlementAccountOwner
from typing import Optional, Set
from typing_extensions import Self

class ReviewableEntitlementAccount(BaseModel):
    """
    Information about the status of the entitlement
    """ # noqa: E501
    native_identity: Optional[StrictStr] = Field(default=None, description="The native identity for this account", alias="nativeIdentity")
    disabled: Optional[StrictBool] = Field(default=False, description="Indicates whether this account is currently disabled")
    locked: Optional[StrictBool] = Field(default=False, description="Indicates whether this account is currently locked")
    type: Optional[DtoType] = None
    id: Optional[StrictStr] = Field(default=None, description="The id associated with the account")
    name: Optional[StrictStr] = Field(default=None, description="The account name")
    created: Optional[datetime] = Field(default=None, description="When the account was created")
    modified: Optional[datetime] = Field(default=None, description="When the account was last modified")
    activity_insights: Optional[ActivityInsights] = Field(default=None, alias="activityInsights")
    description: Optional[StrictStr] = Field(default=None, description="Information about the account")
    governance_group_id: Optional[StrictStr] = Field(default=None, description="The id associated with the machine Account Governance Group", alias="governanceGroupId")
    owner: Optional[ReviewableEntitlementAccountOwner] = None
    __properties: ClassVar[List[str]] = ["nativeIdentity", "disabled", "locked", "type", "id", "name", "created", "modified", "activityInsights", "description", "governanceGroupId", "owner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReviewableEntitlementAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of activity_insights
        if self.activity_insights:
            _dict['activityInsights'] = self.activity_insights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if modified (nullable) is None
        # and model_fields_set contains the field
        if self.modified is None and "modified" in self.model_fields_set:
            _dict['modified'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if governance_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.governance_group_id is None and "governance_group_id" in self.model_fields_set:
            _dict['governanceGroupId'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReviewableEntitlementAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nativeIdentity": obj.get("nativeIdentity"),
            "disabled": obj.get("disabled") if obj.get("disabled") is not None else False,
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "type": obj.get("type"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "activityInsights": ActivityInsights.from_dict(obj["activityInsights"]) if obj.get("activityInsights") is not None else None,
            "description": obj.get("description"),
            "governanceGroupId": obj.get("governanceGroupId"),
            "owner": ReviewableEntitlementAccountOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None
        })
        return _obj


