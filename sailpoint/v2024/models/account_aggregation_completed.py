# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.account_aggregation_completed_source import AccountAggregationCompletedSource
from sailpoint.v2024.models.account_aggregation_completed_stats import AccountAggregationCompletedStats
from typing import Optional, Set
from typing_extensions import Self

class AccountAggregationCompleted(BaseModel):
    """
    AccountAggregationCompleted
    """ # noqa: E501
    source: AccountAggregationCompletedSource
    status: Dict[str, Any] = Field(description="The overall status of the aggregation.")
    started: datetime = Field(description="The date and time when the account aggregation started.")
    completed: datetime = Field(description="The date and time when the account aggregation finished.")
    errors: Optional[List[StrictStr]] = Field(description="A list of errors that occurred during the aggregation.")
    warnings: Optional[List[StrictStr]] = Field(description="A list of warnings that occurred during the aggregation.")
    stats: AccountAggregationCompletedStats
    __properties: ClassVar[List[str]] = ["source", "status", "started", "completed", "errors", "warnings", "stats"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Success', 'Failed', 'Terminated']):
            warnings.warn(f"must be one of enum values ('Success', 'Failed', 'Terminated') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountAggregationCompleted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountAggregationCompleted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "source": AccountAggregationCompletedSource.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "status": obj.get("status"),
            "started": obj.get("started"),
            "completed": obj.get("completed"),
            "errors": obj.get("errors"),
            "warnings": obj.get("warnings"),
            "stats": AccountAggregationCompletedStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj


