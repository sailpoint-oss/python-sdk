# coding: utf-8

"""
    Identity Security Cloud V2024 API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: v2024
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.v2024.models.complete_invocation_input import CompleteInvocationInput
from sailpoint.v2024.models.invocation_status_type import InvocationStatusType
from sailpoint.v2024.models.start_invocation_input import StartInvocationInput
from typing import Optional, Set
from typing_extensions import Self

class InvocationStatus(BaseModel):
    """
    InvocationStatus
    """ # noqa: E501
    id: StrictStr = Field(description="Invocation ID")
    trigger_id: StrictStr = Field(description="Trigger ID", alias="triggerId")
    subscription_name: StrictStr = Field(description="Subscription name", alias="subscriptionName")
    subscription_id: StrictStr = Field(description="Subscription ID", alias="subscriptionId")
    type: InvocationStatusType
    created: datetime = Field(description="Invocation created timestamp. ISO-8601 in UTC.")
    completed: Optional[datetime] = Field(default=None, description="Invocation completed timestamp; empty fields imply invocation is in-flight or not completed. ISO-8601 in UTC.")
    start_invocation_input: StartInvocationInput = Field(alias="startInvocationInput")
    complete_invocation_input: Optional[CompleteInvocationInput] = Field(default=None, alias="completeInvocationInput")
    __properties: ClassVar[List[str]] = ["id", "triggerId", "subscriptionName", "subscriptionId", "type", "created", "completed", "startInvocationInput", "completeInvocationInput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvocationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_invocation_input
        if self.start_invocation_input:
            _dict['startInvocationInput'] = self.start_invocation_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of complete_invocation_input
        if self.complete_invocation_input:
            _dict['completeInvocationInput'] = self.complete_invocation_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvocationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "triggerId": obj.get("triggerId"),
            "subscriptionName": obj.get("subscriptionName"),
            "subscriptionId": obj.get("subscriptionId"),
            "type": obj.get("type"),
            "created": obj.get("created"),
            "completed": obj.get("completed"),
            "startInvocationInput": StartInvocationInput.from_dict(obj["startInvocationInput"]) if obj.get("startInvocationInput") is not None else None,
            "completeInvocationInput": CompleteInvocationInput.from_dict(obj["completeInvocationInput"]) if obj.get("completeInvocationInput") is not None else None
        })
        return _obj


