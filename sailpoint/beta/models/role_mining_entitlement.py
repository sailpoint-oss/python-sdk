# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from sailpoint.beta.models.role_mining_entitlement_ref import RoleMiningEntitlementRef
from typing import Optional, Set
from typing_extensions import Self

class RoleMiningEntitlement(BaseModel):
    """
    RoleMiningEntitlement
    """ # noqa: E501
    entitlement_ref: Optional[RoleMiningEntitlementRef] = Field(default=None, alias="entitlementRef")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entitlement")
    application_name: Optional[StrictStr] = Field(default=None, description="Application name of the entitlement", alias="applicationName")
    identity_count: Optional[StrictInt] = Field(default=None, description="The number of identities with this entitlement in a role.", alias="identityCount")
    popularity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The % popularity of this entitlement in a role.")
    popularity_in_org: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The % popularity of this entitlement in the org.", alias="popularityInOrg")
    source_id: Optional[StrictStr] = Field(default=None, description="The ID of the source/application.", alias="sourceId")
    activity_source_state: Optional[StrictStr] = Field(default=None, description="The status of activity data for the source.   Value is complete or notComplete.", alias="activitySourceState")
    source_usage_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of identities in the potential role that have usage of the source/application of this entitlement.", alias="sourceUsagePercent")
    __properties: ClassVar[List[str]] = ["entitlementRef", "name", "applicationName", "identityCount", "popularity", "popularityInOrg", "sourceId", "activitySourceState", "sourceUsagePercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleMiningEntitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entitlement_ref
        if self.entitlement_ref:
            _dict['entitlementRef'] = self.entitlement_ref.to_dict()
        # set to None if activity_source_state (nullable) is None
        # and model_fields_set contains the field
        if self.activity_source_state is None and "activity_source_state" in self.model_fields_set:
            _dict['activitySourceState'] = None

        # set to None if source_usage_percent (nullable) is None
        # and model_fields_set contains the field
        if self.source_usage_percent is None and "source_usage_percent" in self.model_fields_set:
            _dict['sourceUsagePercent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleMiningEntitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entitlementRef": RoleMiningEntitlementRef.from_dict(obj["entitlementRef"]) if obj.get("entitlementRef") is not None else None,
            "name": obj.get("name"),
            "applicationName": obj.get("applicationName"),
            "identityCount": obj.get("identityCount"),
            "popularity": obj.get("popularity"),
            "popularityInOrg": obj.get("popularityInOrg"),
            "sourceId": obj.get("sourceId"),
            "activitySourceState": obj.get("activitySourceState"),
            "sourceUsagePercent": obj.get("sourceUsagePercent")
        })
        return _obj


