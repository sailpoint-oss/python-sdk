# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.sp_config_rules import SpConfigRules
from typing import Optional, Set
from typing_extensions import Self

class SpConfigObject(BaseModel):
    """
    Response model for object configuration.
    """ # noqa: E501
    object_type: Optional[StrictStr] = Field(default=None, description="Object type the configuration is for.", alias="objectType")
    reference_extractors: Optional[List[StrictStr]] = Field(default=None, description="List of JSON paths within an exported object of this type, representing references that must be resolved.", alias="referenceExtractors")
    signature_required: Optional[StrictBool] = Field(default=False, description="Indicates whether this type of object will be JWS signed and cannot be modified before import.", alias="signatureRequired")
    always_resolve_by_id: Optional[StrictBool] = Field(default=False, description="Indicates whether this object type must be always be resolved by ID.", alias="alwaysResolveById")
    legacy_object: Optional[StrictBool] = Field(default=False, description="Indicates whether this is a legacy object.", alias="legacyObject")
    one_per_tenant: Optional[StrictBool] = Field(default=False, description="Indicates whether there is only one object of this type.", alias="onePerTenant")
    exportable: Optional[StrictBool] = Field(default=False, description="Indicates whether the object can be exported or is just a reference object.")
    rules: Optional[SpConfigRules] = None
    __properties: ClassVar[List[str]] = ["objectType", "referenceExtractors", "signatureRequired", "alwaysResolveById", "legacyObject", "onePerTenant", "exportable", "rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpConfigObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict['rules'] = self.rules.to_dict()
        # set to None if reference_extractors (nullable) is None
        # and model_fields_set contains the field
        if self.reference_extractors is None and "reference_extractors" in self.model_fields_set:
            _dict['referenceExtractors'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpConfigObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objectType": obj.get("objectType"),
            "referenceExtractors": obj.get("referenceExtractors"),
            "signatureRequired": obj.get("signatureRequired") if obj.get("signatureRequired") is not None else False,
            "alwaysResolveById": obj.get("alwaysResolveById") if obj.get("alwaysResolveById") is not None else False,
            "legacyObject": obj.get("legacyObject") if obj.get("legacyObject") is not None else False,
            "onePerTenant": obj.get("onePerTenant") if obj.get("onePerTenant") is not None else False,
            "exportable": obj.get("exportable") if obj.get("exportable") is not None else False,
            "rules": SpConfigRules.from_dict(obj["rules"]) if obj.get("rules") is not None else None
        })
        return _obj


