# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.provisioning_completed_account_requests_inner import ProvisioningCompletedAccountRequestsInner
from sailpoint.beta.models.provisioning_completed_recipient import ProvisioningCompletedRecipient
from sailpoint.beta.models.provisioning_completed_requester import ProvisioningCompletedRequester
from typing import Optional, Set
from typing_extensions import Self

class ProvisioningCompleted(BaseModel):
    """
    ProvisioningCompleted
    """ # noqa: E501
    tracking_number: StrictStr = Field(description="Provisioning request's reference number. Useful for tracking status in the 'Account Activity' search interface.", alias="trackingNumber")
    sources: StrictStr = Field(description="Sources the provisioning transactions were performed on. Sources are comma separated.")
    action: Optional[StrictStr] = Field(default=None, description="Origin of the provisioning request.")
    errors: Optional[List[StrictStr]] = Field(default=None, description="List of any accumulated error messages that occurred during provisioning.")
    warnings: Optional[List[StrictStr]] = Field(default=None, description="List of any accumulated warning messages that occurred during provisioning.")
    recipient: ProvisioningCompletedRecipient
    requester: Optional[ProvisioningCompletedRequester] = None
    account_requests: List[ProvisioningCompletedAccountRequestsInner] = Field(description="List of provisioning instructions to perform on an account-by-account basis.", alias="accountRequests")
    __properties: ClassVar[List[str]] = ["trackingNumber", "sources", "action", "errors", "warnings", "recipient", "requester", "accountRequests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProvisioningCompleted from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in account_requests (list)
        _items = []
        if self.account_requests:
            for _item_account_requests in self.account_requests:
                if _item_account_requests:
                    _items.append(_item_account_requests.to_dict())
            _dict['accountRequests'] = _items
        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['action'] = None

        # set to None if errors (nullable) is None
        # and model_fields_set contains the field
        if self.errors is None and "errors" in self.model_fields_set:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and model_fields_set contains the field
        if self.warnings is None and "warnings" in self.model_fields_set:
            _dict['warnings'] = None

        # set to None if requester (nullable) is None
        # and model_fields_set contains the field
        if self.requester is None and "requester" in self.model_fields_set:
            _dict['requester'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProvisioningCompleted from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trackingNumber": obj.get("trackingNumber"),
            "sources": obj.get("sources"),
            "action": obj.get("action"),
            "errors": obj.get("errors"),
            "warnings": obj.get("warnings"),
            "recipient": ProvisioningCompletedRecipient.from_dict(obj["recipient"]) if obj.get("recipient") is not None else None,
            "requester": ProvisioningCompletedRequester.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "accountRequests": [ProvisioningCompletedAccountRequestsInner.from_dict(_item) for _item in obj["accountRequests"]] if obj.get("accountRequests") is not None else None
        })
        return _obj


