# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.schedule_days import ScheduleDays
from sailpoint.beta.models.schedule_hours import ScheduleHours
from sailpoint.beta.models.schedule_months import ScheduleMonths
from typing import Optional, Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    Schedule
    """ # noqa: E501
    type: StrictStr = Field(description="Determines the overall schedule cadence. In general, all time period fields smaller than the chosen type can be configured. For example, a DAILY schedule can have 'hours' set, but not 'days'; a WEEKLY schedule can have both 'hours' and 'days' set.")
    months: Optional[ScheduleMonths] = None
    days: Optional[ScheduleDays] = None
    hours: ScheduleHours
    expiration: Optional[datetime] = Field(default=None, description="Specifies the time after which this schedule will no longer occur.")
    time_zone_id: Optional[StrictStr] = Field(default=None, description="The time zone to use when running the schedule. For instance, if the schedule is scheduled to run at 1AM, and this field is set to \"CST\", the schedule will run at 1AM CST.", alias="timeZoneId")
    __properties: ClassVar[List[str]] = ["type", "months", "days", "hours", "expiration", "timeZoneId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['WEEKLY', 'MONTHLY', 'ANNUALLY', 'CALENDAR']):
            warnings.warn(f"must be one of enum values ('WEEKLY', 'MONTHLY', 'ANNUALLY', 'CALENDAR') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of months
        if self.months:
            _dict['months'] = self.months.to_dict()
        # override the default output from pydantic by calling `to_dict()` of days
        if self.days:
            _dict['days'] = self.days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hours
        if self.hours:
            _dict['hours'] = self.hours.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "months": ScheduleMonths.from_dict(obj["months"]) if obj.get("months") is not None else None,
            "days": ScheduleDays.from_dict(obj["days"]) if obj.get("days") is not None else None,
            "hours": ScheduleHours.from_dict(obj["hours"]) if obj.get("hours") is not None else None,
            "expiration": obj.get("expiration"),
            "timeZoneId": obj.get("timeZoneId")
        })
        return _obj


