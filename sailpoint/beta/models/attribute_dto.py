# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.attribute_value_dto import AttributeValueDTO
from typing import Optional, Set
from typing_extensions import Self

class AttributeDTO(BaseModel):
    """
    AttributeDTO
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="Technical name of the Attribute. This is unique and cannot be changed after creation.")
    name: Optional[StrictStr] = Field(default=None, description="The display name of the key.")
    multiselect: Optional[StrictBool] = Field(default=False, description="Indicates whether the attribute can have multiple values.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the Attribute.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the Attribute. This can be either \"custom\" or \"governance\".")
    object_types: Optional[List[StrictStr]] = Field(default=None, description="An array of object types this attributes values can be applied to. Possible values are \"all\" or \"entitlement\". Value \"all\" means this attribute can be used with all object types that are supported.", alias="objectTypes")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Attribute.")
    values: Optional[List[AttributeValueDTO]] = None
    __properties: ClassVar[List[str]] = ["key", "name", "multiselect", "status", "type", "objectTypes", "description", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributeDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        # set to None if object_types (nullable) is None
        # and model_fields_set contains the field
        if self.object_types is None and "object_types" in self.model_fields_set:
            _dict['objectTypes'] = None

        # set to None if values (nullable) is None
        # and model_fields_set contains the field
        if self.values is None and "values" in self.model_fields_set:
            _dict['values'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributeDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "name": obj.get("name"),
            "multiselect": obj.get("multiselect") if obj.get("multiselect") is not None else False,
            "status": obj.get("status"),
            "type": obj.get("type"),
            "objectTypes": obj.get("objectTypes"),
            "description": obj.get("description"),
            "values": [AttributeValueDTO.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj


