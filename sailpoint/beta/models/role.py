# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sailpoint.beta.models.access_profile_ref import AccessProfileRef
from sailpoint.beta.models.attribute_dto_list import AttributeDTOList
from sailpoint.beta.models.dimension_ref import DimensionRef
from sailpoint.beta.models.entitlement_ref import EntitlementRef
from sailpoint.beta.models.owner_reference import OwnerReference
from sailpoint.beta.models.requestability_for_role import RequestabilityForRole
from sailpoint.beta.models.revocability_for_role import RevocabilityForRole
from sailpoint.beta.models.role_membership_selector import RoleMembershipSelector
from typing import Optional, Set
from typing_extensions import Self

class Role(BaseModel):
    """
    A Role
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id of the Role. This field must be left null when creating an Role, otherwise a 400 Bad Request error will result.")
    name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The human-readable display name of the Role")
    created: Optional[datetime] = Field(default=None, description="Date the Role was created")
    modified: Optional[datetime] = Field(default=None, description="Date the Role was last modified.")
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the Role")
    owner: OwnerReference
    access_profiles: Optional[List[AccessProfileRef]] = Field(default=None, alias="accessProfiles")
    entitlements: Optional[List[EntitlementRef]] = None
    membership: Optional[RoleMembershipSelector] = None
    legacy_membership_info: Optional[Dict[str, Any]] = Field(default=None, description="This field is not directly modifiable and is generally expected to be *null*. In very rare instances, some Roles may have been created using membership selection criteria that are no longer fully supported. While these Roles will still work, they should be migrated to STANDARD or IDENTITY_LIST selection criteria. This field exists for informational purposes as an aid to such migration.", alias="legacyMembershipInfo")
    enabled: Optional[StrictBool] = Field(default=False, description="Whether the Role is enabled or not.")
    requestable: Optional[StrictBool] = Field(default=False, description="Whether the Role can be the target of access requests.")
    access_request_config: Optional[RequestabilityForRole] = Field(default=None, alias="accessRequestConfig")
    revocation_request_config: Optional[RevocabilityForRole] = Field(default=None, alias="revocationRequestConfig")
    segments: Optional[List[StrictStr]] = Field(default=None, description="List of IDs of segments, if any, to which this Role is assigned.")
    dimensional: Optional[StrictBool] = Field(default=False, description="Whether the Role is dimensional.")
    dimension_refs: Optional[List[DimensionRef]] = Field(default=None, description="List of references to dimensions to which this Role is assigned. This field is only relevant if the Role is dimensional.", alias="dimensionRefs")
    access_model_metadata: Optional[AttributeDTOList] = Field(default=None, alias="accessModelMetadata")
    __properties: ClassVar[List[str]] = ["id", "name", "created", "modified", "description", "owner", "accessProfiles", "entitlements", "membership", "legacyMembershipInfo", "enabled", "requestable", "accessRequestConfig", "revocationRequestConfig", "segments", "dimensional", "dimensionRefs", "accessModelMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created",
            "modified",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in access_profiles (list)
        _items = []
        if self.access_profiles:
            for _item_access_profiles in self.access_profiles:
                if _item_access_profiles:
                    _items.append(_item_access_profiles.to_dict())
            _dict['accessProfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entitlements (list)
        _items = []
        if self.entitlements:
            for _item_entitlements in self.entitlements:
                if _item_entitlements:
                    _items.append(_item_entitlements.to_dict())
            _dict['entitlements'] = _items
        # override the default output from pydantic by calling `to_dict()` of membership
        if self.membership:
            _dict['membership'] = self.membership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_request_config
        if self.access_request_config:
            _dict['accessRequestConfig'] = self.access_request_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revocation_request_config
        if self.revocation_request_config:
            _dict['revocationRequestConfig'] = self.revocation_request_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_refs (list)
        _items = []
        if self.dimension_refs:
            for _item_dimension_refs in self.dimension_refs:
                if _item_dimension_refs:
                    _items.append(_item_dimension_refs.to_dict())
            _dict['dimensionRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of access_model_metadata
        if self.access_model_metadata:
            _dict['accessModelMetadata'] = self.access_model_metadata.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if access_profiles (nullable) is None
        # and model_fields_set contains the field
        if self.access_profiles is None and "access_profiles" in self.model_fields_set:
            _dict['accessProfiles'] = None

        # set to None if membership (nullable) is None
        # and model_fields_set contains the field
        if self.membership is None and "membership" in self.model_fields_set:
            _dict['membership'] = None

        # set to None if legacy_membership_info (nullable) is None
        # and model_fields_set contains the field
        if self.legacy_membership_info is None and "legacy_membership_info" in self.model_fields_set:
            _dict['legacyMembershipInfo'] = None

        # set to None if segments (nullable) is None
        # and model_fields_set contains the field
        if self.segments is None and "segments" in self.model_fields_set:
            _dict['segments'] = None

        # set to None if dimensional (nullable) is None
        # and model_fields_set contains the field
        if self.dimensional is None and "dimensional" in self.model_fields_set:
            _dict['dimensional'] = None

        # set to None if dimension_refs (nullable) is None
        # and model_fields_set contains the field
        if self.dimension_refs is None and "dimension_refs" in self.model_fields_set:
            _dict['dimensionRefs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "description": obj.get("description"),
            "owner": OwnerReference.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "accessProfiles": [AccessProfileRef.from_dict(_item) for _item in obj["accessProfiles"]] if obj.get("accessProfiles") is not None else None,
            "entitlements": [EntitlementRef.from_dict(_item) for _item in obj["entitlements"]] if obj.get("entitlements") is not None else None,
            "membership": RoleMembershipSelector.from_dict(obj["membership"]) if obj.get("membership") is not None else None,
            "legacyMembershipInfo": obj.get("legacyMembershipInfo"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "requestable": obj.get("requestable") if obj.get("requestable") is not None else False,
            "accessRequestConfig": RequestabilityForRole.from_dict(obj["accessRequestConfig"]) if obj.get("accessRequestConfig") is not None else None,
            "revocationRequestConfig": RevocabilityForRole.from_dict(obj["revocationRequestConfig"]) if obj.get("revocationRequestConfig") is not None else None,
            "segments": obj.get("segments"),
            "dimensional": obj.get("dimensional") if obj.get("dimensional") is not None else False,
            "dimensionRefs": [DimensionRef.from_dict(_item) for _item in obj["dimensionRefs"]] if obj.get("dimensionRefs") is not None else None,
            "accessModelMetadata": AttributeDTOList.from_dict(obj["accessModelMetadata"]) if obj.get("accessModelMetadata") is not None else None
        })
        return _obj


