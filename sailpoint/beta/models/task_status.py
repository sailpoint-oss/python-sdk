# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sailpoint.beta.models.target import Target
from sailpoint.beta.models.task_definition_summary import TaskDefinitionSummary
from sailpoint.beta.models.task_return_details import TaskReturnDetails
from sailpoint.beta.models.task_status_message import TaskStatusMessage
from typing import Optional, Set
from typing_extensions import Self

class TaskStatus(BaseModel):
    """
    Details and current status of a specific task
    """ # noqa: E501
    id: StrictStr = Field(description="System-generated unique ID of the task this TaskStatus represents")
    type: StrictStr = Field(description="Type of task this TaskStatus represents")
    unique_name: StrictStr = Field(description="Name of the task this TaskStatus represents", alias="uniqueName")
    description: StrictStr = Field(description="Description of the task this TaskStatus represents")
    parent_name: Optional[StrictStr] = Field(description="Name of the parent of the task this TaskStatus represents", alias="parentName")
    launcher: StrictStr = Field(description="Service to execute the task this TaskStatus represents")
    target: Optional[Target] = None
    created: datetime = Field(description="Creation date of the task this TaskStatus represents")
    modified: datetime = Field(description="Last modification date of the task this TaskStatus represents")
    launched: Optional[datetime] = Field(description="Launch date of the task this TaskStatus represents")
    completed: Optional[datetime] = Field(description="Completion date of the task this TaskStatus represents")
    completion_status: Optional[StrictStr] = Field(description="Completion status of the task this TaskStatus represents", alias="completionStatus")
    messages: List[TaskStatusMessage] = Field(description="Messages associated with the task this TaskStatus represents")
    returns: List[TaskReturnDetails] = Field(description="Return values from the task this TaskStatus represents")
    attributes: Dict[str, Any] = Field(description="Attributes of the task this TaskStatus represents")
    progress: Optional[StrictStr] = Field(description="Current progress of the task this TaskStatus represents")
    percent_complete: StrictInt = Field(description="Current percentage completion of the task this TaskStatus represents", alias="percentComplete")
    task_definition_summary: Optional[TaskDefinitionSummary] = Field(default=None, alias="taskDefinitionSummary")
    __properties: ClassVar[List[str]] = ["id", "type", "uniqueName", "description", "parentName", "launcher", "target", "created", "modified", "launched", "completed", "completionStatus", "messages", "returns", "attributes", "progress", "percentComplete", "taskDefinitionSummary"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['QUARTZ', 'QPOC', 'QUEUED_TASK']):
            warnings.warn(f"must be one of enum values ('QUARTZ', 'QPOC', 'QUEUED_TASK') unknown value: {value}")
        return value

    @field_validator('completion_status')
    def completion_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCCESS', 'WARNING', 'ERROR', 'TERMINATED', 'TEMPERROR']):
            warnings.warn(f"must be one of enum values ('SUCCESS', 'WARNING', 'ERROR', 'TERMINATED', 'TEMPERROR') unknown value: {value}")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in returns (list)
        _items = []
        if self.returns:
            for _item_returns in self.returns:
                if _item_returns:
                    _items.append(_item_returns.to_dict())
            _dict['returns'] = _items
        # override the default output from pydantic by calling `to_dict()` of task_definition_summary
        if self.task_definition_summary:
            _dict['taskDefinitionSummary'] = self.task_definition_summary.to_dict()
        # set to None if parent_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_name is None and "parent_name" in self.model_fields_set:
            _dict['parentName'] = None

        # set to None if target (nullable) is None
        # and model_fields_set contains the field
        if self.target is None and "target" in self.model_fields_set:
            _dict['target'] = None

        # set to None if launched (nullable) is None
        # and model_fields_set contains the field
        if self.launched is None and "launched" in self.model_fields_set:
            _dict['launched'] = None

        # set to None if completed (nullable) is None
        # and model_fields_set contains the field
        if self.completed is None and "completed" in self.model_fields_set:
            _dict['completed'] = None

        # set to None if completion_status (nullable) is None
        # and model_fields_set contains the field
        if self.completion_status is None and "completion_status" in self.model_fields_set:
            _dict['completionStatus'] = None

        # set to None if progress (nullable) is None
        # and model_fields_set contains the field
        if self.progress is None and "progress" in self.model_fields_set:
            _dict['progress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "uniqueName": obj.get("uniqueName"),
            "description": obj.get("description"),
            "parentName": obj.get("parentName"),
            "launcher": obj.get("launcher"),
            "target": Target.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "created": obj.get("created"),
            "modified": obj.get("modified"),
            "launched": obj.get("launched"),
            "completed": obj.get("completed"),
            "completionStatus": obj.get("completionStatus"),
            "messages": [TaskStatusMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "returns": [TaskReturnDetails.from_dict(_item) for _item in obj["returns"]] if obj.get("returns") is not None else None,
            "attributes": obj.get("attributes"),
            "progress": obj.get("progress"),
            "percentComplete": obj.get("percentComplete"),
            "taskDefinitionSummary": TaskDefinitionSummary.from_dict(obj["taskDefinitionSummary"]) if obj.get("taskDefinitionSummary") is not None else None
        })
        return _obj


