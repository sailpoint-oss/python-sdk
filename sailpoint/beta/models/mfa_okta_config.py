# coding: utf-8

"""
    Identity Security Cloud Beta API

    Use these APIs to interact with the Identity Security Cloud platform to achieve repeatable, automated processes with greater scalability. These APIs are in beta and are subject to change. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.1.0-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import warnings

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MfaOktaConfig(BaseModel):
    """
    MfaOktaConfig
    """ # noqa: E501
    mfa_method: Optional[StrictStr] = Field(default=None, description="Mfa method name", alias="mfaMethod")
    enabled: Optional[StrictBool] = Field(default=False, description="If MFA method is enabled.")
    host: Optional[StrictStr] = Field(default=None, description="The server host name or IP address of the MFA provider.")
    access_key: Optional[StrictStr] = Field(default=None, description="The secret key for authenticating requests to the MFA provider.", alias="accessKey")
    identity_attribute: Optional[StrictStr] = Field(default=None, description="Optional. The name of the attribute for mapping IdentityNow identity to the MFA provider.", alias="identityAttribute")
    __properties: ClassVar[List[str]] = ["mfaMethod", "enabled", "host", "accessKey", "identityAttribute"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MfaOktaConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mfa_method (nullable) is None
        # and model_fields_set contains the field
        if self.mfa_method is None and "mfa_method" in self.model_fields_set:
            _dict['mfaMethod'] = None

        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict['host'] = None

        # set to None if access_key (nullable) is None
        # and model_fields_set contains the field
        if self.access_key is None and "access_key" in self.model_fields_set:
            _dict['accessKey'] = None

        # set to None if identity_attribute (nullable) is None
        # and model_fields_set contains the field
        if self.identity_attribute is None and "identity_attribute" in self.model_fields_set:
            _dict['identityAttribute'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MfaOktaConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mfaMethod": obj.get("mfaMethod"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "host": obj.get("host"),
            "accessKey": obj.get("accessKey"),
            "identityAttribute": obj.get("identityAttribute")
        })
        return _obj


